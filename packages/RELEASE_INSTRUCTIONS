make sure NEWS is updated with info on changes in latest release
also may want to have NEWS lines be no longer than 80 characters

update DESCRIPTION and INSTALL with current version number

update LICENSE with current year

check CRAN results page to see what issues CRAN testing has noted:
https://cran.r-project.org/web/checks/check_results_nimble.html

Make sure src/Makevars.win is present.

# before running 'make man' (i.e., prep_pkg.R) make sure there is a config.R in nimble/R - copy over from another repos if needed but it should not be in the repository per DTL instructions (or do in separate copy of repository: make configure; cd nimble; ./configure - note that if do this the configure step will have an error in building libnimble.a and that a bunch of files will be created in src that should not be in the repository (all but *.in and nimble.cpp do not belong)

config.R should be this:
```
NeedMakevarsFile = TRUE
UseLibraryMakevars = TRUE
.NimbleUseRegistration = TRUE
```

run 'make man' (formerly ./prep_pkg.R)
# this creates man pages and updates NAMESPACE

git add any new .Rd files

## note that an error: "section title spans multiple lines" will occur in roxygenization if any "@section" line does not have a ":" at the end of the line

R CMD build nimble
R CMD check --as-cran nimble_${VERSION}.tar.gz
# officially this should be done on a development build of R, but now can be done formally using rhub (see below), so doing on your own machine in a release version of R just serves as a first pass

Recently I've been getting this warning on my Ubuntu machine:
Compilation used the following non-portable flag(s):
  ‘-Wdate-time’ ‘-Werror=format-security’ ‘-Wformat’
Seems like it might just be my local system. As long as doesn't show in win-builder or rhub (non-ubuntu/debian systems), should be ok.

R CMD INSTALL nimble_${VERSION}.tar.gz

Run tests via ./run_tests.R

Note that test-size results are simply showing warnings from model building that are labeled based on the test message - what is marked as a KNOWN PROBLEM is not _all_ of the tests that are KNOWN PROBLEMS, just those that happen to generate warnings. 

run tests on all OS ideally

change version number in UserManual/src/{title.tex,_output.yml}
rebuild manual as further test of package

run examples in nimble-demos as further test

check reverse dependencies:

from nimble/packages/rev_deps, with the current nimble .tar.gz in that directory (and having re-downloaded the dependencies), do:
out <- tools::check_packages_in_dir('.', reverse = list())
summary(out)
Can also do this to see if anything has changed:
tools::check_packages_in_dir_changes('.', old = '../rev_deps_previous_version') # for this you need an the most recent version of nimble as the 'old'

Note that as of 0.11.0 I was having trouble getting this to work unless I manually download the source tarballs of the dependent packages as the default now seems to be to download the non-source Linux binary packages. It's best to download them to nimble/packages/rev_deps as otherwise some built objects populate nimble/packages/nimble and we don't want those accidentally committed to the repo.

run nimbleSMC R CMD check and tests

If have problems with check_packages_in_dir, can
download .tar.gz for reverse dependencies and run R CMD check on it.
This was necessary for exPrior, nimbleEcology and nimbleSMC in 0.10.0.

exPrior seems to no longer be on CRAN as of 2020-11-23

At one point bcgam testing was failing, but seems fine as of 2019-10-04.

we could put new version of manual in inst/doc, but not doing that because we don't want to add to the size of the tarball/package install)

make sure no calls to compileNimble are in any examples that are not wrapped in a \dontrun; these calls will cause installation failure on Solaris and big headaches with CRAN

Now in a separate branch: vX.Y-Z-cran, do this:

before release to CRAN put "$FLIBS" at end of last line in src/Makevars.in (it will pass R CMD check with "# $(FLIBS)" presumably because they are doing some sort of grep, but that is not kosher of course)

test cross-machine on Macs and on Windows

can test using rhub (from within packages/nimble):

Rscript -e "library(rhub);check(platform = c('ubuntu-gcc-devel','windows-x86_64-devel','linux-x86_64-rocker-gcc-san','fedora-clang-devel'))" >> /tmp/rhub.out

can test on Windows using win-builder and Mac M1 on macbuilder (https://mac.r-project.org/macbuilder/submit.html)

careful AD testing:
- run full ADmodel testing in packages/test-ADmodels-full.R, either scanning all results or (TBD) setting up a gold file. This is both time-consuming an a PITA because of tolerances.
- run some AD tests on Windows (this might be done via winbuilder with AD tests now in GHA)
- install Mac binary tarball that is created on one Mac on a second Mac - make sure nothing baked in when mimicing binary creation by CRAN

submit to CRAN
- request install_opts="--no-multiarch" -- check back with Perry
- potentially making use of notes in CJP's cranSubmit.txt file

Once CRAN package accepted:

(make sure both html and pdf versions of manual are updated and in repo before doing zenodo upload, since we should use the updated pdf manual as part of Zenodoversion)

create new version with package tarball and manual in Zenodo (search for 10.5281/zenodo.1211190 in Google; finding using `nimble` in the Zenodo search bar is a pain). Note that inst/CITATION uses the version-independent DOI so don't need to update DOI in CITATION or on badge on r-nimble.org.
However we might revisit this as that means that users will cite the version independent DOI at the same time they refer to a specific NIMBLE version. Probably ok and means we don't have to mint the DOI just as we are about to submit to CRAN and then shunt aside the new Zenodo version if there is a CRAN problem.

login to nature.berkeley.edu: ssh to your_calnet_id@nature.berkeley.edu and use CalNet password
cd /web/R-nimble/wordpress/src/contrib

for version on nimble website, avoid the FLIBS/stan/Eigen changes above
(actually see above as it's simplest just to leave the Eigen changes in)

cp new .tar.gz there

chmod go+w nimble_${VERSION}.tar.gz

./writePackages

put new user manual PDF in /web/R-nimble/wordpress/manuals
and change symlink to point to newest pdf
and change to g+w for NimbleUserManual_$VERSION.pdf

put new user manual HTML in /web/R-nimble/wordpress/html_manual
from nimble/UserManual:
tar -cvzf tmp.tgz *html libs search_index.json nimble-icon.png NimbleUserManual_files
copy to /web/R-nimble/wordpress/html_manual
on nature.b.e:
tar -xvzf tmp.tgz; rm -rf tmp.tgz

post examples as run on new version to /web/R-nimble/wordpress/nimbleExamples

go to website: R-nimble.org/login and login 

note that to make a new blog post or modify pages, need to 
deactivate Google analyticator on Plugins -> Installed Plugins page

change Downloads page on R-nimble.org to reflect new version (including 'download source pkg' link);

update archived versions of newly-deprecated package and User Manual on Archived versions page.

add info on new release to release notes page

update version numbering on license and citation page

This is a good time to update info on our core developer team on the website if needed.

make a posting about the release on the webpage: click New Post (or maybe Posts —> New Post) then the post title should automatically go in the news roll on the right of the main page (include R as a tag (not just a 'category'!!!) if you want it picked up by R-bloggers). At some point it used to be that posts that are close to time of r-bloggers appearance in late afternoon Pacific time tend to show up first or early on the days blogs, so try to avoid always posting at that time out of fairness. If post in evening after r-bloggers appears, would be lower down. Actually, more recently, R-bloggers has come out early morning (6;30 am PT), and it appears that posts made just after that time show up first in the R-bloggers the next day..

(best to point with a hyperlink to the info on versions/news on webpage not to NEWS)

send notice to nimble-announce, nimble-users as from the email of your admin status.

*****************
** IMPORTANT ****
*****************
reactivate Google Analyticator by clicking on 'activate' on Plugins -> Installed Plugins 
*****************

make sure to merge devel into master branch

git checkout master
git merge devel
git commit -am'merged new version onto master'

probably best at this point also to merge master onto devel

Create a new GitHub release via https://github.com/nimble-dev/nimble/releases baed on master. Include a blurb about the release.  This will also create a tag, so no need to separately use `git tag` or `git push --tags`. 

Note that adding a release used to autogenerate a zenodo page and DOI but per below comment I don't think this linking is still in effect.  

update version number in DESC in devel

### updating Github README

Update version number in README.md, including in the citation section.

Unfortunately in v0.6-10 zenodo integration was somehow turned off and in the process of trying to add it manually, Chris got an entirely different zenodo instnace.

Here's the new one:
NIMBLE Development Team. (2018, March 26). nimble-dev/nimble (Version v0.6-10). Zenodo. http://doi.org/10.5281/zenodo.1211191
10.5281/zenodo.1211190 is for all versions

And here is the old one:
Christopher Paciorek, perrydv, Daniel Turek, Nicholas Michaud, Fritz Obermeyer, Duncan Temple Lang, … David LeBauer. (2018, February 17). nimble-dev/nimble: v0.6-9 (Version v0.6-9). Zenodo. http://doi.org/10.5281/zenodo.1174525
10.5281/zenodo.820704 is for all versions

### running rchk to find memory protection errors

Could try to run the ubuntu-rchk Docker container. While made for rhub, it is also available pre-made here at Docker Cloud which allows one to run the rchk.sh script in a local instance.

### building binaries

make sure there is no libnimble.{a,dylib,so} in inst/CppCode or it will be copied over and interfere with the libnimble created during the build process

For Mac: 
R CMD INSTALL -l location --build nimble # you should be in nimble/packages when invoking this
# don't use --merge-multiarch for Mac as it provides only one architecture for R

Alternatively (as Perry did 2023-05-11):
R CMD build nimble
R CMD INSTALL -l /Users/perry/Projects/nimble_binary_test_2023_05_11/ --build nimble_1.0.0.tar.gz

For Windows (should one use the -l flag here too to avoid mucking up source repo?)
R CMD build nimble  # to build tar.gz
R CMD INSTALL --build --merge-multiarch nimble_0.6.tar.gz # to build zip file
(--merge-multiarch only applies to a single tarball, so need this as two steps)

#### Older/auxiliary material below here

### Building of Windows version (instructions from DT (old; use DTL instructions above))

put this in build.bat:
=====
@echo off
cd Documents\GitHub\nimble\packages
R CMD INSTALL --build nimble
=====

Then:
press WindowsButton-R, which opens the "Run" dialogue.
type "command" and press enter, to open a dos prompt.  (PowerShell is better, but don't need it for this).
if you're in the directory with the batch file (build.bat), then just type "build" at the prompt.

Not clear (should check with DTL) if the resulting installed package can then simply be zipped and if that is equivalent to what CRAN does when it builds the Windows binary.

NOTE: as of v0.6, mcmc testing seemed to run fine on Savio (SciLinux) and run but give compiler warnings related to Eigen on NERSC Edison (SUSE).


==========
Solaris testing

Can use VirtualBox Solaris VM on Paciorek smeagol Linux box. See solaris.sh for notes

==========
sanitizer testing

CRAN seems only to use UBSAN (undefined behavior sanitizer) though Kurt Hornik indicated that he built R with ASAN (address sanitizer) and UBSAN

to set up R-devel with SAN:

# configuration for ASAN, UBSAN, SAN (UBSAN+ASAN)
./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-asan 'CC=/tmp/clang/bin/clang -fsanitize=address -fno-omit-frame-pointer' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=address  -fno-omit-frame-pointer' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=address  -fno-omit-frame-pointer' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack

 ./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-san 'CC=/tmp/clang/bin/clang -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr  -fno-omit-frame-pointer' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr -fno-omit-frame-pointer' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr -fno-omit-frame-pointer' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack

./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-ubsan 'CC=/tmp/clang/bin/clang -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack 

on paciorek smeagol box:
need to turn vm.overcommit_memory to 2 on my Linux box or building R will fail because conftest will not run as ASAN tries to allocate a ridiculous amount of memory.

export LD_LIBRARY_PATH=/tmp/clang/lib:$LD_LIBRARY_PATH

CRAN might use valgrind (Cliff suggested this). If so, may want to check package examples with:
R -d valgrind --vanilla < nimble.Rcheck/mypkg-Ex.R
R -d "valgrind --tool=memcheck --leak-check=full" --vanilla <
   nimble.Rcheck/mypkg-Ex.R
