make sure NEWS is updated with info on changes in latest release

update DESCRIPTION and INSTALL with current version number

update LICENSE with current year

for version on nimble website, remove FLIBS from src/Makevars.in
for CRAN, we need it in there, but it prevents easy source installation on Macs without getting the right version of libgfortran

Make sure src/Makevars.win is present.

# before running prep_pkg.R make sure there is a config.R in nimble/R - copy over from another repos if needed but it should not be in the repository per DTL instructions (or do in separate copy of repository: make configure; cd nimble; ./configure - note that if do this the configure step will have an error in building libnimble.a and that a bunch of files will be created in src that should not be in the repository (all but *.in and nimble.cpp do not belong)

./prep_pkg.R # this creates man pages and updates NAMESPACE

R CMD build nimble
R CMD check --as-cran nimble_${VERSION}.tar.gz
# officially this should be done on a development build of R, but now can be done formally using rhub (see below), so doing on your own machine in a release version of R just serves as a first pass

R CMD INSTALL nimble_${VERSION}.tar.gz

run tests:
in particular check exact results vs previous versions (ignore differences in compilation log info)
doing this test by test because of DLL unloading issue
types="allocation checkDSL compareMCMCs copy coreR declare distributions dsl_dists errors filtering getBound getDependencies getDistributionInfo getParam graphStructure math mcem mcmc models modelValuesInterface nimbleFunctionInterfaces nimbleList nimbleList_RCfun numericTypes setData size trunc types user"
for type in $types; do
Rscript -e "library(nimble); library(methods); library(testthat); test_package('nimble','$type')" > /tmp/test-results-v${VERSION}-${type} 2>&1
done

for type in $types; do
Rscript -e "library(nimble); library(methods); library(testthat); test_package('nimble','$type')" >> /tmp/test-results-v${VERSION} 2>&1
done

rebuild manual as further test of package

put new version of manual in inst/doc (perhaps - not sure if we want to add that much to the size of the tarball/package install)

before release to CRAN put "$FLIBS" at end of last line in src/Makevars.in (it will pass R CMD check with "# $(FLIBS)" presumably because they are doing some sort of grep, but that is not kosher of course)
and comment out rstan usage as in packages/MCMC_suite_rstan_monkeying_for_cran.R
and change to requireNamespace('rstan') from require('rstan')

test cross-machine on Macs and on Windows

can test using rhub (from within packages/nimble):

Rscript -e "library(rhub);check(platform = c('ubuntu-gcc-devel','windows-x86_64-devel','linux-x86_64-rocker-gcc-san','linux-x86_64-centos6-epel','fedora-clang-devel'))" >> rhub.out

submit to CRAN - potentially making use of notes in CJP's cranSubmit.txt file

login to nature.berkeley.edu: ssh to your_calnet_id@nature.berkeley.edu and use CalNet password
cd /web/R-nimble/wordpress/src/contrib

cp new .tar.gz there

chmod go+w nimble_${VERSION}.tar.gz

./writePackages

go to website: R-nimble.org/login and login 

note that to make a new blog post or modify pages, need to 
deactivate Google analyticator on Plugins -> Installed Plugins page

change Downloads page on R-nimble.org to reflect new version; creating link for newly-deprecated version at bottom

put new user manual in /web/R-nimble/wordpress/manuals
and change symlink to point to newest pdf

make a posting about the release on the webpage: click New Post (or maybe Posts â€”> New Post) then the post title should automatically go in the news roll on the right of the main page (include R as a tag if you want it picked up by R-bloggers)

add info on new release to release notes page

update NEWS info on webpage as high-level summary of NEWS in package

update version numbering on license and citation page and 'What is Nimble' page

update documentation page with link to updated manual

send notice to nimble-announce, nimble-users as christopher.paciorek@gmail.com (i.e., from the email of your admin status)

*****************
** IMPORTANT ****
*****************
reactivate Google Analyticator by clicking on 'activate' on Plugins -> Installed Plugins 
*****************

make sure to merge devel into master branch and create a branch for the new version
before doing so add final test-results-v$VERSION to repo to provide baseline for future releases
git checkout master
git merge devel
git commit -am'merged new version onto master'

probably best at this point also to merge master onto devel

git tag -a v$VERSION -m "NIMBLE version $VERSION release, December 31, 2014"
git push --tags    ## this is how you push *tags* to the remote

# make tag for nimble-docs too
git tag -a v$VERSION -m "NIMBLE version $VERSION release, April 6, 2016"
git push --tags    ## this is how you push *tags* to the remote


### building binaries

make sure there is no libnimble.{a,dylib,so} in inst/CppCode or it will be copied over and interfere with the libnimble created during the build process

For Mac: 
R CMD INSTALL -l location --build nimble # you should be in nimble/packages when invoking this
# don't use --merge-multiarch for Mac as it provides only one architecture for R

For Windows (should one use the -l flag here too to avoid mucking up source repo?)
R CMD build nimble  # to build tar.gz
R CMD INSTALL --build --merge-multiarch nimble_0.6.tar.gz # to build zip file
(--merge-multiarch only applies to a single tarball, so need this as two steps)

#### Older/auxiliary material below here

### Building of Windows version (instructions from DT (old; use DTL instructions above))

put this in build.bat:
=====
@echo off
cd Documents\GitHub\nimble\packages
R CMD INSTALL --build nimble
=====

Then:
press WindowsButton-R, which opens the "Run" dialogue.
type "command" and press enter, to open a dos prompt.  (PowerShell is better, but don't need it for this).
if you're in the directory with the batch file (build.bat), then just type "build" at the prompt.

Not clear (should check with DTL) if the resulting installed package can then simply be zipped and if that is equivalent to what CRAN does when it builds the Windows binary.

NOTE: as of v0.6, mcmc testing seemed to run fine on Savio (SciLinux) and run but give compiler warnings related to Eigen on NERSC Edison (SUSE).


==========
Solaris testing

Can use VirtualBox Solaris VM on Paciorek smeagol Linux box. See solaris.sh for notes

==========
sanitizer testing

CRAN seems only to use UBSAN (undefined behavior sanitizer) though Kurt Hornik indicated that he built R with ASAN (address sanitizer) and UBSAN

to set up R-devel with SAN:

# configuration for ASAN, UBSAN, SAN (UBSAN+ASAN)
./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-asan 'CC=/tmp/clang/bin/clang -fsanitize=address -fno-omit-frame-pointer' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=address  -fno-omit-frame-pointer' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=address  -fno-omit-frame-pointer' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack

 ./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-san 'CC=/tmp/clang/bin/clang -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr  -fno-omit-frame-pointer' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr -fno-omit-frame-pointer' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=undefined,address -fno-sanitize=float-divide-by-zero,vptr -fno-omit-frame-pointer' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack

./configure --prefix=/usr/local/R-devel_2016-09-12-clang39-ubsan 'CC=/tmp/clang/bin/clang -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'CFLAGS=-pipe -std=gnu99 -Wall -pedantic -g' 'F77=gfortran' 'FFLAGS=-pipe -Wall -pedantic -g' 'CXX=/tmp/clang/bin/clang++ -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'CXXFLAGS=-pipe -Wall -pedantic -g' 'CXX1X=/tmp/clang/bin/clang++ -fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr' 'FC=gfortran' 'FCFLAGS=-pipe -Wall -pedantic -g' --with-cairo --with-jpeglib --with-readline --with-tcltk --with-lapack 

on paciorek smeagol box:
need to turn vm.overcommit_memory to 2 on my Linux box or building R will fail because conftest will not run as ASAN tries to allocate a ridiculous amount of memory.

export LD_LIBRARY_PATH=/tmp/clang/lib:$LD_LIBRARY_PATH

CRAN might use valgrind (Cliff suggested this). If so, may want to check package examples with:
R -d valgrind --vanilla < nimble.Rcheck/mypkg-Ex.R
R -d "valgrind --tool=memcheck --leak-check=full" --vanilla <
   nimble.Rcheck/mypkg-Ex.R
