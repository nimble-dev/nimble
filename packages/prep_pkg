#!/usr/bin/Rscript

# this script creates the Rd files from the roxygen info in the R files
# and creates the NAMESPACE file

# as of R3.2.2 get lots of messages like
# "Found more than one class "nfMethodRC" in cache; using the first, from namespace 'nimble'"
# seems to be because we are loading in nimble and we are sourcing code files in global,
# so class definitions are in two places

require(roxygen2)
require(methods)


# need to document all S4 methods
explicitUndocFuns <- c("[,numberedModelValuesAccessors-method", "[<-,numberedModelValuesAccessors-method", "[,numberedObjects-method", "[<-,numberedObjects-method", "[[,CNumericList-method", "[[<-,CNumericList-method", "[[,RNumericList-method", "[[<-,RNumericList-method", "[[,nimPointerList-method", "[[<-,nimPointerList-method", "[[<-,nimbleFunctionList-method", "[,distributionsClass-method", "[[,distributionsClass-method", "[[,conjugacyRelationshipsClass-method")

imports <- c("methods", "igraph")
imports <- paste("import(", imports, ")", sep = '', collapse = "\n")

importFroms <- c("coda, effectiveSize, as.mcmc, is.mcmc.list",
                 "grDevices, dev.off, jpeg",
                 "graphics, lines, plot, text",
                 "stats, aggregate, ar, lm, optim, pnorm, qnorm, residuals, runif, sd, var")
#                 "R2WinBUGS, bugs",
#                 "rjags, jags.model",
#                 "rjags, coda.samples",
#                 "rstan, stan_model",
#                 "rstan, sampling")

importFroms <- paste("importFrom(", importFroms, ")", sep = "", collapse = "\n") 

dynLibLine <- "useDynLib(nimble, .registration = TRUE)"
exportAllLine <- "exportPattern('.')"

S3methods <- c("as.matrix, CmodelValues",
               "as.matrix, modelValuesBaseClass",
               "length, nimPointerList")

S3methods <- paste("S3method(", S3methods, ")", sep = "", collapse = "\n")

# need everything exported for roxygenization to work...
#cat(paste(imports, "\n", importFroms, "\n", dynLibLine, "\n", exportAllLine, "\n", sep = "", collapse = ''),
cat(paste(imports, importFroms, dynLibLine, S3methods, exportAllLine, sep = "\n", collapse = '\n'),
    file = file.path("nimble", "NAMESPACE"))

system("R CMD build nimble")

nimble_version <- system("grep 'Version:' nimble/DESCRIPTION | cut -d' ' -f2", intern = TRUE)

system(paste0("R CMD INSTALL nimble_", nimble_version, ".tar.gz"))

# need to remove existing Rd files or get errors with
# recursion and walking graph for classes
cur <- getwd()
setwd(file.path("nimble", "man"))

files <- list.files()
file.remove(files)

setwd(cur)

require(nimble)

Rpath <- file.path("nimble", "R")
files <- list.files(Rpath, pattern = "*R$")  # omit config.R.in
roclet = rd_roclet()
for(file in files) {  
  print(file)
  test <- try(a <- roxygen2:::roc_proc_text(roclet, paste(readLines(file.path(Rpath, file)), sep="\n")))
  if(!is(test, 'try-error'))
    roxygen2:::roc_output(roclet, a, "nimble", options = list(wrap=FALSE, roclets = "rd"), check = FALSE)
}




funs <- ls('package:nimble')
documentedFuns <- list.files(file.path("nimble", "man"), pattern = "*Rd$")
documentedFuns <- sub(".Rd$", "", documentedFuns)

# pull in all the @aliases and @names in the Rd files
setwd(file.path("nimble", "man"))
tmp <- readLines(pipe("cat *Rd"))
aliases <- tmp[grep("^(\\\\name|\\\\alias)", tmp)]
aliases <- gsub("^(\\\\name|\\\\alias)\\{", "", aliases)
aliases <- gsub("\\}", "", aliases)
aliases <- unique(aliases)

setwd(cur)

# combination of file names and @aliases and @names, though all file names are probably in @name or @alias...
documentedFuns <- unique(c(documentedFuns, aliases))
undocFuns <- funs[!funs %in% documentedFuns]
# make sure to have fooClass-Class documented in nimble-internal to pass R CMD check
undocClasses <- undocFuns[grep("Class$", undocFuns)]

#undocFuns <- c(undocFuns, paste0(undocClasses, "-Class", sep = ''))
undocClasses <- paste0(undocClasses, "-Class", sep = '')

# need the following additional exports that need to be doc'ed by CRAN rules

additionalExports <- c("calc_dmnormConjugacyContributions", "calc_dmnormAltParams", "getNodeFunctionIndexedInfo", "singleModelValuesAccess", "getNimbleProject", "nimbleInternalFunctions", "nimbleUserNamespace", "dsqrtinvgamma", "rsqrtinvgamma")
# write out nimble-internals.Rd

internals <- c(undocClasses, explicitUndocFuns, additionalExports)

text <- rep("", length(internals))
for(i in seq_along(internals)) 
  text[i] <- paste0("\\alias{", internals[i], "}")

internalDesc <- "\\description{\nFunctions and classes used internally in NIMBLE and not expected to be called directly by users. Some functions and classes not intended for direct use are documented and/or exported because they are used within Reference Class methods for classes programmatically generated by NIMBLE.\n}\n\\author{NIMBLE Development Team}"

text <- c("\\name{nimble-internal}", "\\title{Functions and Classes Internal to NIMBLE}",
          text, internalDesc)

cat(paste(text, collapse = "\n"), file = file.path("nimble", "man", "nimble-internal.Rd"))


mathFuns <- c('cloglog', 'cube', 'expit', 'icloglog', 'ilogit',
  'inprod', 'inverse', 'iprobit', 'logdet', 'logfact', 'loggam', 'logit',
  'nimEquals', 'nimRound', 'nimStep', 'nimSwitch', 'phi', 'pow', 'probit')

text <- rep("", length(mathFuns))
for(i in seq_along(mathFuns)) 
  text[i] <- paste0("\\alias{", mathFuns[i], "}")

internalDesc <- "\\description{\nMathematical functions for use in BUGS code and in nimbleFunction programming (i.e., nimbleFunction run code). See Chapter 5 of the User Manual for more details.\n}\n\\author{NIMBLE Development Team}"

text <- c("\\name{nimble-math}", "\\title{Mathematical functions for BUGS and nimbleFunction programming}", text, internalDesc)

cat(paste(text, collapse = "\n"), file = file.path("nimble", "man", "nimble-math.Rd"))

# when classes are exported, R seems to want individual Rd files for them
#for(i in exportClasses)
#    cat(paste(paste0("\\name{nimble-internal}\n", "\\title{Functions and Classes Internal to NIMBLE}\n", "\\alias{", i, "}\n", "\\alias{", i, "-Class}\n"), internalDesc, collapse = "\n"), file = file.path("nimble", "man", paste0(i, ".Rd")))

# now create real NAMESPACE file
## NAMESPACE
system(paste("mv", file.path('nimble','NAMESPACE'), file.path('/tmp', 'NAMESPACE')))
roxygenise('nimble','namespace')

namespace <- readLines(file.path('nimble','NAMESPACE'))

#rmLines <- c(grep("^#", namespace), grep("^$", namespace))
#namespace <- namespace[-rmLines]
exportNames <- gsub("(export|exportClasses)", "", namespace)
exportNames <- gsub("[()]", "", exportNames)
exportNames <- gsub("\"", "", exportNames)
keep <- exportNames %in% funs

exportText <- namespace[keep]

additionalExports <- c(additionalExports, 'nimbleType')  # nimbleType needed it is being exported only as a class as it is officially a refClass not a function
exportTextAdd <- paste0("export(", additionalExports, ")")
exportText <- c(exportTextAdd, exportText)

#cat(paste(imports, "\n", importFroms, "\n", dynLibLine, "\n", exportText, "\n", collapse = ''),
cat(paste(imports, importFroms, dynLibLine, S3methods, collapse = '\n', sep = '\n'), '\n', paste0(exportText, collapse = '\n'), sep = '', file = file.path("nimble", "NAMESPACE"))
