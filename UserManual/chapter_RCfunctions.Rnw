\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

<<echo=FALSE>>=
read_chunk(file.path('chunks', 'programmingWithModels_chunks.R'))  # one can put code chunks here if one wants
@ 


\chapter{Writing simple nimbleFunctions}
\label{cha:RCfunctions}

\section{Introduction to simple nimbleFunctions}
\label{sec:RC-intro}

\nm{nimbleFunctions} are the heart of programming in NIMBLE.  In this
chapter, we introduce simple nimbleFunctions that contain only one
function to be executed, in either compiled or uncompiled form, but no
setup function or additional methods.

Defining a simple nimbleFunction is like defining an R function:
\cd{nimbleFunction} returns a function that can be executed, and it
can also be compiled.  Simple nimbleFunctions are useful for doing math or the other
kinds of processing available in NIMBLE when no model or modelValues
is needed. These can be used for any purpose in R programming.  They
can also be used as new functions and distributions in NIMBLE's
extension of BUGS (Chapter \ref{cha:user-defined}).


  Here's a basic example implementing the textbook calculation of
  least squares estimation of linear regression parameters\footnote{Of course, in general, explicitly
  calculating the inverse is not the recommended numerical recipe for
  least squares.}:
  
<<nf-RCfun, message=FALSE>>=
@  

In this example, we fit a linear model for 100 random response values (\cd{y}) to four columns of
randomly generated explanatory variables (\cd{X}).  We ran the
nimbleFunction 
\cd{solveLeastSquares} uncompiled,
natively in R, allowing testing and debugging (Section \ref{sec:debugging}).  Then we compiled it and showed that the compiled version does the same thing,
but faster\footnote{On the machine this is
  being written on, the compiled version runs a few times faster than
  the uncompiled version.  However we refrain from formal speed
  tests.}.  NIMBLE's compiler creates C++ that uses the Eigen (\href{http://eigen.tuxfamily.org}{http://eigen.tuxfamily.org})
library for linear algebra.

Notice that the actual NIMBLE code is written as an R function
definition that is passed to \cd{nimbleFunction} as the \cd{run}
argument.  Hence we call it the \nm{run} code.  run code is
written in the NIMBLE language.  This is similar to a narrow subset of
R with some additional features.  Formally, we view it as a distinct language
 that encompasses what can be compiled from a nimbleFunction.

To write nimbleFunctions, you will need to learn:

\begin{itemize}
\item what R functions are supported for NIMBLE compilation and any
  ways they differ from their regular R counterparts;
\item how NIMBLE handles types of variables;
\item how to declare types of \cd{nimbleFunction} arguments and return values;
\item that compiled nimbleFunctions always pass arguments to each
  other by reference.
%\item how to use nimbleList data structures.
\end{itemize}

The next sections cover each of these topics in turn.

\section{R functions (or variants) implemented in NIMBLE}
\label{sec:r-fiunctions-implemented}

\subsection{Finding help for NIMBLE's versions of R functions}

Often, R help pages are available for NIMBLE's versions of R functions
using the prefix ``nim'' and capitalizing the next letter.  For
example, help on NIMBLE's version of \cd{numeric} can be found by \cd{help(nimNumeric)}. In some cases help is found directly using the name of the function as it appears in R. 

\subsection{Basic operations}

Basic R operations supported for NIMBLE compilation are listed in
Table \ref{table:functions-coreR}.

{
\footnotesize 
\LTcapwidth=\textwidth
\begin{longtable}[c]{ll}
 \caption{Basic R manipulation functions in NIMBLE.  To find help in R for NIMBLE's version of a function, use the ``nim'' prefix and capitalize the next letter.  E.g. \cd{help(nimC)} for help with \cd{c()}.} \label{table:functions-coreR} \\
 \hline
\input{coreRtableLong.tex}
\end{longtable}
}

Other R functions with numeric arguments and return value can be called during compiled execution by wrapping them as a \cd{nimbleRcall} (see Section \ref{sec:calling-R-code}).

Next we cover some of these functions in more detail. 

\subsubsection{\cd{numeric}, \cd{integer}, \cd{logical}, \cd{matrix}
  and \cd{array}}

\cd{numeric}, \cd{integer}, or \cd{logical} will create a 1-dimensional vector of
floating-point (or ``double'' [precision]), integer, or logical values, respectively.  The \cd{length} argument specifies the vector 
length (default 0), and the \cd{value} argument specifies the initial 
 value either as a scalar (used for all vector elements, with default
 0) or a vector. If a vector and its length is not equal to \cd{length}, the remaining values will be zero, but we plan to implement R-style recycling in the next version of NIMBLE. The \cd{init} argument specifies 
whether or not to initialize the elements in compiled code (default \cd{TRUE}).  If
first use of the variable does not rely on initial values,  using
\cd{init = FALSE} will yield slightly more efficient performance.

\cd{matrix} creates a 2-dimensional matrix object of either floating-point (if 
\cd{type = "double"}, the default), integer (if \cd{type = "integer"}), or logical (if \cd{type = "logical"}) values. 
As in R, \cd{nrow} and \cd{ncol} arguments specify the number of rows and columns, respectively. 
The \cd{value} and \cd{init} arguments are used in the same way as for
\cd{numeric}, \cd{integer}, and \cd{logical}.

\cd{array} creates a vector or higher-dimensional object, depending
on the \cd{dim} argument, which takes a vector of sizes for each
dimension.  The \cd{type}, \cd{value} and \cd{init} argument behave
the same as for \cd{matrix}.

The best way to create an identity matrix is with \cd{diag(n)}, which
returns an $n \times n$ identity matrix.  NIMBLE also provides a deprecated
nimbleFunction \cd{identityMatrix} that does the same thing.

Examples of these functions, and the related function $\cd{setSize}$
for changing the size of a numeric object, are given in Section \ref{sec:chang-sizes-exist}.

\subsubsection{\cd{length} and \cd{dim}}
\label{sec:query-chang-sizes}

\cd{length} behaves like R's \cd{length} function.  It
  returns the \textit{entire} length of X.  That means if \cd{X} is
  multivariate, \cd{length(X)} returns the product of the sizes of
  the dimensions.  NIMBLE's version of \cd{dim}, which has synonym \cd{nimDim}, behaves like R's
  \cd{dim} function for matrices or arrays and like R's
  \cd{length} function for vectors.  In other words, regardless of
  whether the number of dimensions is 1 or more, it returns a vector
  of the sizes. 

\subsubsection{Deprecated creation of non-scalar objects using \cd{declare}}

Previous versions of NIMBLE provided a function \cd{declare} for
declaring variables.  The more R-like functions \cd{numeric},
\cd{integer}, \cd{logical}, \cd{matrix} and \cd{array} are intended to replace
\cd{declare}, but \cd{declare} is still supported for backward
compatibility.  In a future version of NIMBLE, \cd{declare} may be removed.

\subsection{Math and linear algebra}
\label{sec:basic-math-linear}

Numeric scalar and matrix mathematical operations are listed in Tables
\ref{table:functions-dsl} and \ref{table:functions-matrix-dsl}.  

As in R, many scalar operations in NIMBLE will work component-wise on vectors or
higher dimensional objects.  For example if B and C are vectors, \cd{A
  = B + C} will add them and create vector C by component-wise
addition of B and C.  In the current version of NIMBLE, component-wise operations
generally only work for vectors and matrices, not arrays with more
than two dimensions.  The only exception is assignment: \cd{A = B} will
work up to NIMBLE's current limit of four dimensions.

{
\footnotesize 
\LTcapwidth=\textwidth
\begin{longtable}[c]{lllcc}
 \caption{Functions operating on scalars, many of which can operate on
   each element (component-wise) of vectors and matrices. Status
   column indicates if the function is currently provided in
   NIMBLE.}    \label{table:functions-dsl}\\
\hline
 Usage & Description & Comments & Status & Accepts \\
   &  &  &  & vector input  \\
  \hline \hline \\
\endhead
\input{functionTableLong.tex}
\end{longtable}
}


{
\footnotesize
\LTcapwidth=\textwidth

\begin{longtable}[c]{lllc}
 \caption{Functions operating on vectors and matrices. Status column
  indicates if the function is currently provided in
  NIMBLE.} \label{table:functions-matrix-dsl} \\
  \hline
  Usage & Description & Comments & Status   \\
  \hline \hline \\
\endhead
\input{functionTableMatrixLong.tex}
\input{eigenSvdTableMatrixAsNimList.tex}
 \end{longtable}
}

More information on the nimbleLists returned by the \cd{eigen} and \cd{svd} functions in NIMBLE can be found in Section \ref{sec:eigen-nimFunctions}.


\subsection{Distribution functions}
\label{sec:nimble-dist-funs}

Distribution ``d'', ``r'', ``p'', and ``q'' functions can all be used
from nimbleFunctions (and in BUGS model code), but care is needed in the syntax, as follows.
\begin{itemize}
\item Names of the distributions generally (but not always) match those of R, which
  sometimes differ from BUGS.  See the list below.
\item Supported parameterizations are also indicated in the list below. 
  \item For multivariate distributions (multivariate normal,
    Dirichlet, and Wishart),  ``r'' functions only return one random
draw at a time, and the first argument must always be 1.
\item R's recycling rule (re-use of an argument as needed to accommodate
  longer values of other arguments) is generally followed, but the
  returned object is always a scalar or a vector, not a matrix or
  array.
\end{itemize}

As in R (and nimbleFunctions), arguments are matched by order or by name
(if given). Standard arguments to distribution functions in R
(\cd{log}, \cd{log.p}, \cd{lower.tail}) can be used and have the same
defaults. User-defined distributions for BUGS (Chapter
\ref{cha:user-defined}) can also be used from
nimbleFunctions. 

For standard distributions, we rely on R's regular help pages
(e.g., \cd{help(dgamma)}.  For distributions unique to NIMBLE
(e.g., \cd{dexp\_nimble}, \cd{ddirch}), we provide help pages.

Supported distributions, listed by their ``d'' function, include:
\begin{multicols}{2}
\begin{itemize}
\item \cd{dbinom(x, size, prob, log)}
\item \cd{dcat(x, prob, log)}
\item \cd{dmulti(x, size, prob, log)}
\item \cd{dnbinom(x, size, prob, log)}
\item \cd{dpois(x, lambda, log)}
\item \cd{dbeta(x, shape1, shape2, log)}
\item \cd{dchisq(x, df, log)}
\item \cd{dexp(x, rate, log)}
\item \cd{dexp\_nimble(x, rate, log)}
\item \cd{dexp\_nimble(x, scale, log)}
\item \cd{dgamma(x, shape, rate, log)}
\item \cd{dgamma(x, shape, scale, log)}
\item \cd{dinvgamma(x, shape, rate, log)}
\item \cd{dinvgamma(x, shape, scale, log)}
\item \cd{dlnorm(x, meanlog, sdlog, log)}
\item \cd{dlogis(x, location, scale, log)}
\item \cd{dnorm(x, mean, sd, log)}
 \item \cd{dt\_nonstandard(x, df, mu, sigma, log)}
 \item \cd{dt(x, df, log)}
 \item \cd{dunif(x, min, max, log)}
 \item \cd{dweibull(x, shape, scale, log)}
  \item \cd{ddirch(x, alpha, log)}
  \item \cd{dmnorm\_chol(x, mean, cholesky, prec\_param, log)}
  \item \cd{dmvt\_chol(x, mu, cholesky, df, prec\_param, log)}
  \item \cd{dwish\_chol(x, cholesky, df, \\scale\_param, log)}
\end{itemize}
\end{multicols}

In the last three, \cd{cholesky} stands for Cholesky decomposition of the relevant matrix; 
\cd{prec\_param} is a logical indicating whether the Cholesky is of a
precision matrix (TRUE) or covariance matrix (FALSE)\footnote{For the multivariate t, these are more properly termed the `inverse scale' and `scale' matrices.}; and \cd{scale\_param} is a logical indicating whether the Cholesky is of a scale matrix (TRUE) or an inverse scale matrix (FALSE).

\subsection{Flow control: \cd{if-then-else}, \cd{for},  \cd{while}, and \cd{stop}}
\label{sec:basic-flow-control}

These basic flow-control structures use the same syntax as in R.
However, \cd{for}-loops are limited to sequential integer
indexing.  For example, \cd{for(i in 2:5) \{...\} } works as it does
in R.  Decreasing index sequences are not allowed.  Unlike in R,
\cd{if} is not itself a function that returns a value.

We plan to include more flexible \cd{for}-loops in the future, but for
now we've included just one additional useful feature:  \cd{for(i in
  seq\_along(NFL))} will work as in R, where \cd{NFL} is a
\cd{nimbleFunctionList}.  This is described in Section \ref{sec:virt-nimbl-nimbl}.

\cd{stop}, or equivalently \cd{nimStop}, throws
control to R's error-handling system and can take a character
argument that will be displayed in an error message.

\subsection{\cd{print} and \cd{cat}}
\label{sec:print}

\cd{print}, or equivalently
\cd{nimPrint}, prints an arbitrary set of outputs in order and adds a
newline character at the end.  \cd{cat} or \cd{nimCat} is identical,
except without a newline at the end.  

\subsection{Checking for user interrupts: \cd{checkInterrupt}}
\label{sec:check-user-interr}

When you write algorithms that will run for a long time in C++, you
may want to explicitly check whether a user has tried to interrupt the
execution (i.e., by pressing Control-C).  Simply include
\cd{checkInterrupt} in run code at places where a check should
be done.  If there has been an
interrupt waiting to be handled, the process will stop and return control to R.

\subsection{Optimization: \cd{optim} and \cd{nimOptim}}

NIMBLE provides a \cd{nimOptim} function that partially implement's R's
\cd{optim} function with some minor differences.  \cd{nimOptim} supports
optimization methods ``Nelder-Mead'', ``BFGS'', ``CG'', ``L-BFGS-B'', but does
not support methods ``SANN'' and ``Brent''. NIMBLE's \cd{nimOptim} supports
gradients using user-provided functions if available or finite differences
otherwise, but it does not currently support Hessian computations. Currently
\cd{nimOptim} does not support extra parameters to the function being optimized
(via \cd{\dots}), but a work-around is to create a new \cd{nimbleFunction} that
binds those fixed parameters. Finally, \cd{nimOptim} requires a \cd{nimbleList}
datatype for the \cd{control} parameter, whereas R's \cd{optim} uses a simple R
\cd{list}. To define the \cd{control} parameter, create a default value with
the \cd{nimOptimDefaultControl} function, and set any desired fields. For
example usage, see the unit tests in
\href{https://github.com/nimble-dev/nimble/blob/master/packages/nimble/inst/tests/test-optim.R}{tests/test-optim.R}.

\subsection{``nim'' synonyms for some functions}
\label{sec:altern-keyw-some}

NIMBLE uses some keywords, such as \cd{dim} and \cd{print}, in ways
similar but not identical to R. In addition, there are some keywords
in NIMBLE that have the same names as R functions with quite different functionality.
For example, \cd{step} is part of the BUGS language, but it is also an
R function for stepwise model selection.  And \cd{equals} is part of
the BUGS language but is also used in the \cd{testthat} package, which
we use in testing NIMBLE.

NIMBLE tries to avoid conflicts by replacing
some keywords immediately upon creating a nimbleFunction.  These
replacements include
\begin{multicols}{2}
\begin{itemize}
\item \cd{c} $\rightarrow$ \cd{nimC}
\item \cd{copy} $\rightarrow$ \cd{nimCopy}
\item \cd{dim}  $\rightarrow$ \cd{nimDim}
\item \cd{print} $\rightarrow$ \cd{nimPrint}
\item \cd{cat} $\rightarrow$ \cd{nimCat}
\item \cd{step} $\rightarrow$ \cd{nimStep}
\item \cd{equals} $\rightarrow$ \cd{nimEquals}
\item \cd{rep} $\rightarrow$ \cd{nimRep}
\item \cd{round} $\rightarrow$ \cd{nimRound}
\item \cd{seq} $\rightarrow$ \cd{nimSeq}
\item \cd{stop} $\rightarrow$ \cd{nimStop}
\item \cd{switch} $\rightarrow$ \cd{nimSwitch}
\item \cd{numeric, integer, logical} $\rightarrow$ \cd{nimNumeric, nimInteger, nimLogical}
\item \cd{matrix, array} $\rightarrow$ \cd{nimMatrix, nimArray}
\end{itemize}
\end{multicols}

This system gives programmers the choice between using the keywords like
\cd{nimPrint} directly, to avoid confusion in their own code about
which ``print'' is being used, or to use the more intuitive keywords
like \cd{print} but remember that they are not the same as R's functions.

\section{How NIMBLE handles types of variables}
\label{sec:how-nimble-handles}

Variables in the NIMBLE language are statically typed. Once a variable
is used for one type, it can't subsequently be used for a different
type.  This rule facilitates NIMBLE's compilation to C++.  The NIMBLE
compiler often determines types automatically, but sometimes the
programmer needs to explicitly provide them.

The elemental types supported by NIMBLE include \nm{double}
(floating-point), \nm{integer}, \nm{logical}, and \nm{character}.   The \nm{type} of
a numeric or logical object refers to the number
of dimensions and the elemental type of the elements.  Hence if \cd{x}
is created as a double matrix, it can only be used subsequently for a double
matrix.  The size of each dimension is not part of its type and thus
can be changed.  Up to four
dimensions are supported for double, integer, and logical.  Only
vectors (one dimension) are supported for character.  Unlike R, NIMBLE supports true
scalars, which have 0 dimensions.


\subsection{\cd{nimbleList} data structures}
\label{sec:nimbleList-RCFuns}

A \cd{nimbleList} is a data structure that can contain arbitrary other NIMBLE objects, including other \cd{nimbleList}s.
Like other NIMBLE types, nimbleLists are strongly typed: each \cd{nimbleList} is created from a configuration that
declares what types of objects it will hold.  \cd{nimbleList}s are covered in Chapter \ref{sec:nimbleLists}.

\subsection{How numeric types work}
\label{sec:how-types-work}

R's dynamic types support easy programming because one type can sometimes
be transformed to another type automatically when an expression is
evaluated.  NIMBLE's static types makes it stricter than R.

\subsubsection{When NIMBLE can automatically set a numeric type}
\label{sec:when-nimble-can}

When a variable is first created by assignment, its type is determined
automatically by that assignment. For example, if \cd{x} has not appeared before, then
<<eval=FALSE>>=
x <- A %*% B ## assume A and B are double matrices or vectors
@ 

will create \cd{x} to be a double matrix of the correct size
(determined during execution).  If \cd{x} is used subsequently, it can
only be used as a double matrix. This is true even if it is assigned a
new value, which will again set its size automatically but cannot
change its type.

\subsubsection{When a numeric object needs to be created before being
  used}
\label{sec:when-numeric-object}

If the contents of a variable are to be populated by assignment into
some indices in steps, the variable must be created first.  Further,
it must be large enough for its eventual contents; it will not be automatically
resized if assignments are made beyond its current size.  For example,
in the following code, \cd{x} must be created before being filled with
contents for specific indices.

<<exampleDeclare, eval=FALSE>>=
x <- numeric(10)

for(i in 1:10) 
   x[i] <- foo(y[i]) 
@



\subsubsection{Changing the sizes of existing objects: \cd{setSize}}
\label{sec:chang-sizes-exist}

\cd{setSize} changes the size of an object, preserving its contents in
column-major order.  

<<exampleNumeric, eval=FALSE>>=
## Example of creating and resizing a floating-point vector
## myNumericVector will be of length 10, with all elements initialized to 2 
myNumericVector <- numeric(10, value = 2) 
## resize this numeric vector to be length 20; last 10 elements will be 0
setSize(myNumericVector, 20)
@

<<exampleMatrix, eval=FALSE>>=
## Example of creating a 1-by-10 matrix with values 1:10 and resizing it
myMatrix <- matrix(1:10, nrow = 1, ncol = 10) 
## resize this matrix to be a 10-by-10 matrix
setSize(myMatrix, c(10, 10))
## The first column will have the 1:10
@


\subsubsection{Confusions between scalars and length-one vectors}
\label{sec:conf-betw-scal}

In R, there is no such thing is a true scalar; scalars can always be
treated as vectors of length one.  NIMBLE allows true scalars, which
can create confusions.  For example, consider the following code:

<<eval=FALSE>>=
myfun <- nimbleFunction(
    run = function(i = integer()) { ## i is an integer scalar
        randomValues <- rnorm(10)   ## double vector
        a <- randomValues[i]        ## double scalar
        b <- randomValues[i:i]      ## double vector
        d <- a + b                  ## double vector
        f <- c(i)                   ## integer vector
    })
@ 

In the line that creates \cd{b}, the index range \cd{i:i} is not
evaluated until run time.  Even though \cd{i:i} will always evaluate
to simpy \cd{i}, the compiler does not determine that.  Since there is
a vector index range provided, the result of \cd{randomValues[i:i]} is
determined to be a vector.  The following line then creates \cd{d} as
a vector, because a vector plus a scalar returns a vector.  Another
way to create a vector from a scalar is to use \cd{c}, as
illustrated in the last line.

\subsubsection{Confusions between vectors and one-column or one-row matrices}
\label{sec:conf-betw-scal}

Consider the following code:
<<>>=
myfun <- nimbleFunction(
    run = function() { 
        A <- matrix(value = rnorm(9), nrow = 3)
        B <- rnorm(3)
        Cmatrix <- A %*% B                ## double matrix, one column
        Cvector <- (A %*% B)[,1]          ## double vector
        Cmatrix <- (A %*% B)[,1]          ## error, vector assigned to matrix
        Cmatrix[,1] <- (A %*% B)[,1]      ## ok, if Cmatrix is large enough
    })
@ 
This creates a matrix \cd{A}, a vector \cd{B}, and matrix-multiplies
them.  The vector \cd{B} is automatically treated as a one-column
matrix in matrix algebra computations.  The result of matrix multiplication is always a matrix, but
a programmer may expect a vector, since they know the result will have
one column.  To make it a vector, simply extract the first column.
More information about such handling is provided in the next section.

\subsubsection{Understanding dimensions and sizes from linear algebra}
\label{sec:manag-dimens-sizes}

As much as possible, NIMBLE behaves like R when determining types and
sizes returned from linear algebra expressions, but in some cases this
is not possible because R uses run-time information while NIMBLE must
determine dimensions at compile time. For example, when matrix
multiplying a matrix by a vector, R treats the vector as a one-column
matrix unless treating it as a one-row matrix is the only way to make
the expression valid, as determined at run time.  NIMBLE usually must assume during compilation
that it should be a one-column matrix, unless it can determine not
just the number of dimensions but the actual sizes during
compilation.  When needed \cd{asRow} and \cd{asCol} can control how a
vector will be treated as a matrix.

Here is a guide to such issues.  Suppose \cd{v1} and \cd{v2} are vectors, and \cd{M1} is a matrix.  Then

\begin{itemize}
\item  \cd{v1 + M1} generates a compilation error unless one dimension of
\cd{M1} is known at compile-time to be 1.  If so, then \cd{v1} is promoted to a
1-row or 1-column matrix to conform with \cd{M1}, and the result is a
matrix of the same sizes.  This behavior occurs for
all component-wise binary functions.

\item \cd{v1 \%*\% M1} defaults to promoting \cd{v1} to a 1-row matrix,
  unless it is known at compile-time that \cd{M1} has 1 row, in which case
  \cd{v1} is promoted to a 1-column matrix.

\item \cd{M1 \%*\% v1} defaults to promoting \cd{v1} to a 1-column matrix,
unless it is known at compile time that \cd{M1} has 1 column, in which case
\cd{v1} is promoted to a 1-row matrix.

\item \cd{v1 \%*\% v2} promotes \cd{v1} to a 1-row matrix and \cd{v2} to a
1-column matrix, so the returned values is a 1x1 matrix with the inner
product of \cd{v1} and \cd{v2}.  If you want the inner product as a scalar, use
\cd{inprod(v1, v2)}. 

\item \cd{asRow(v1)} explicitly promotes \cd{v1} to a 1-row matrix.
  Therefore \cd{v1 \%*\% asRow(v2)} gives the outer product of
  \cd{v1} and \cd{v2}.
  
\item \cd{asCol(v1)} explicitly promotes \cd{v1} to a 1-column matrix.  
  
\item The default promotion for a vector is to a 1-column matrix.
  Therefore, \cd{v1 \%*\% t(v2)} is equivalent to \cd{v1 \%*\% asRow(v2)} .

\item When indexing, dimensions with scalar indices will be dropped.
  For example, \cd{M1[1,]} and \cd{M1[,1]} are both vectors.  If you
  do not want this behavior, use \cd{drop=FALSE} just as in R.  For
  example, \cd{M1[1,,drop=FALSE]} is a matrix.
  
\item The left-hand side of an assignment can use indexing, but if so
  it must already be correctly sized for the result.  For example,
  \cd{Y[5:10, 20:30] <- x} will not work -- and could crash
  your R session with a segmentation fault --  if Y is not
  already at least 10x30 in size.  This can be done by \cd{setSize(Y,
    c(10, 30))}.  See Section \ref{sec:chang-sizes-exist} for more
  details.  Note that non-indexed assignment to \cd{Y}, such as \cd{Y
    <- x}, will automatically set \cd{Y} to the necessary size. 
  
\end{itemize}

Here are some examples to illustrate the above points, assuming \cd{M2} is
a square matrix.

\begin{itemize}
\item \cd{Y <- v1 + M2 \%*\% v2} will
  return a 1-column matrix.  If Y is created by this statement, it
  will be a 2-dimensional variable.  If Y already exists, it must
  already be 2-dimesional, and it will be automatically re-sized for
  the result.
\item \cd{Y <- v1 + (M2 \%*\% v2)[,1]} will return a vector.  Y
  will either be created as a vector or must already exist as a vector
  and will be re-sized for the result.
\end{itemize}

\subsubsection{Size warnings and the potential for crashes}
\label{sec:size-warn-potent}

For matrix algebra, NIMBLE cannot ensure perfect behavior because
sizes are not known until run time.  Therefore, it is possible for you
to write code that will crash your R session.  In Version \ver, NIMBLE
attempts to issue a warning if sizes are not compatible, but it does not
halt execution.  Therefore, if you execute \cd{A <- M1 \% * \%
  M2}, and \cd{M1} and \cd{M2} are not compatible for matrix multiplication,
NIMBLE will output a warning that the number of rows of \cd{M1} does not
match the number of columns of \cd{M2}.  After that warning the statement
will be executed and may result in a crash.  Another easy way to write
code that will crash is to do things like \cd{Y[5:10, 20:30] <-
  x} without ensuring Y is at least 10x30.  In the future we hope to
prevent crashes, but in Version \ver\ we limit ourselves to trying to provide
useful information.

\section{Declaring argument and return types}
\label{sec:decl-argum-return}

NIMBLE requires that types of arguments and the type of the return value be
explicitly declared.

As illustrated in the example in Section \ref{sec:RC-intro},  the
syntax for a type declaration is:

 \cd{type(nDim, sizes)}
 
where \cd{type} is \cd{double}, \cd{integer}, \cd{logical} or \cd{character}. 
(In more general nimbleFunction programming, a type can also be a
nimbleList type, discussed in Section \ref{sec:nimbleLists}.)

For example \cd{run = function(x = double(1)) { ... }} sets the single argument of the run function to be a vector of numeric values of unknown size.

For \cd{type(nDim, sizes)}, \cd{nDim} is the number of dimensions, with 0 indicating scalar and omission of \cd{nDim} defaulting to a scalar.
\cd{sizes} is an optional vector of fixed, known sizes.  
 For example, \cd{double(2,
  c(4, 5))} declares a \cd{4-$\times$-5} matrix.  If sizes
are omitted, they will be set either by assignment or by \cd{setSize}.

In the case of scalar arguments only, a default value can be
provided.  For example, to provide 1.2 as a default:

<<example-argtype, eval=FALSE>>=
myfun <- nimbleFunction(
    run = function(x = double(0, default = 1.2)) {
})
@ 

Functions with return values must have their return type explicitly declared using \cd{returnType}, which can occur anywhere in the run code. For example \cd{returnType(integer(2))} declares the return type to be a matrix of integers. A return type of \cd{void()} means there is
no return value, which is the default if no \cd{returnType} statement
is included.  

\section{Compiled nimbleFunctions pass arguments by reference}
\label{sec:comp-nimbl-pass}

Uncompiled nimbleFunctions pass arguments like R does, by copy.  If
\cd{x} is passed as an argument to function \cd{foo}, and \cd{foo}
modifies \cd{x} internally, it is modifying its copy of \cd{x}, not
the original \cd{x} that was passed to it.  

Compiled nimbleFunctions pass arguments to other compiled
nimbleFunctions by reference (or pointer).  This is very different.
Now if \cd{foo} modifies \cd{x} internally, it is modifying the same
\cd{x} that was passed to it.  This allows much faster execution but
  is obviously a fundamentally different behavior.
  
  Uncompiled execution of nimbleFunctions is primarily intended for
  debugging.  However, debugging of how nimbleFunctions interact via
  arguments requires testing the compiled versions.
  
\section{Calling external compiled code}
\label{sec:calling-external-code}

If you have a function in your own compiled C or C++ code and an appropriate header file, you can generate a nimbleFunction that wraps access to that function, which can then be used in other nimbleFunctions.  See \cd{help(nimbleExternalCall)} for an example.  This also contains an example of using an externally compiled function in the BUGS code of a model.

\section{Calling uncompiled R functions from compiled \cd{nimbleFunctions}}
\label{sec:calling-R-code}

Sometimes one may want to combine R functions with compiled nimbleFunctions.  Obviously a compiled nimbleFunction can be called from R.  An R function with numeric inputs and output can be called from compiled nimbleFunctions.  The call to the R function is wrapped in a nimbleFunction returned by \cd{nimbleRcall}.  See \cd{help(nimbleRcall)} for an example, including an example of using the resulting function in the BUGS code of a model.
