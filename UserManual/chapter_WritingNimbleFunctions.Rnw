%% See http://yihui.name/knitr/demo/child/ for documentation on the parent/child document system of knitr

\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

\chapter{Writing nimbleFunctions to interact with models}
\label{cha:progr-with-models}

<<echo=FALSE>>=
read_chunk(file.path('chunks', 'programmingWithModels_chunks.R')) 
@ 


  
\section{Overview}
\label{sec:writ-nimble-funct}

When you write an R function, you say what the input arguments are,
you provide the code for execution, and in that code you give the
value to be returned\footnote{Normally this is the value of the last
  evaluated code, or the argument to \cd{return}.}.  Using the
\cd{function} keyword in R triggers the operation of
creating an object that is the function.

Creating nimbleFunctions is similar, but there
are two kinds of code and two steps of execution:

\begin{enumerate}
\item \nm{Setup} code is provided as a regular R function, but the
  programmer does not control what it returns.  Typically the inputs to
  \nm{setup} code are objects like a model, a vector of nodes,
  a modelValues object or a modelValues configuration, or another nimbleFunction.  The setup code,
  as its name implies, sets up information for run-time code.  It is
  executed in R, so it can use any aspect of R.
\item \nm{Run} code is provided in the NIMBLE language, which was
  introduced in Chapter \ref{cha:RCfunctions}.  This is
  similar to a narrow subset of R, but it is important to remember
  that it is different -- defined by what can be compiled -- and much more limited.  \nm{Run} code can
  use the objects created by the \nm{setup} code.  In addition,
  some information on variable types must be provided for input
  arguments, the return value, and in some circumstances for local
  variables. There are two
  kinds of \nm{run} code:
  \begin{enumerate}
  \item There is always a primary function, given as the argument \cd{run}
    \footnote{This can be omitted if you don't need it.}.
  \item There can optionally be other functions, or ``methods'' in the
    language of object-oriented programming, that share the same
    objects created by the \nm{setup} function.
  \end{enumerate}
\end{enumerate}

Here is a small example to fix ideas:

<<nf-intro>>=
@ 

The call to the R function called \cd{nimbleFunction} returns a
function, similarly to defining a function in R. That function,
\cd{logProbCalcPlus}, takes arguments for its \cd{setup} function,
executes it, and returns an object, \cd{logProbCalcPlusA}, that has a
\nm{run} member function (method) accessed by \cd{\$run}.  In this case, the
\cd{setup} function obtains the stochastic dependencies of the
\cd{node} using the \cd{getDependencies} member function of the model
(see Section \ref{sec:cdgetdependencies}) and stores them in
\cd{dependentNodes}.  In this way, \cd{logProbCalcPlus} can adapt to any
model.  It also creates a variable, \cd{valueToAdd}, that can be used by the nimbleFunction.

The object \cd{logProbCalcPlusA}, returned by \cd{logProbCalcPlus},
is permanently bound to the results of the processed \cd{setup}
function.  In this case, \cd{logProbCalcPlusA\$run} takes a scalar input value, \cd{P},
assigns \cd{P + valueToAdd} to
the given node in the model, and returns the sum of the log
probabilities of that node and its stochastic
dependencies\footnote{Note the use of the global assignment operator
  to assign into the model.  This is necessary for assigning into
  variables from the \cd{setup} function, at least if you want to avoid
  warnings from R.  These warnings come from R's reference class
  system.}.  We say  \cd{logProbCalcPlusA} is an ``instance'' of
\cd{logProbCalcPlus} that is
``specialized'' or ``bound'' to \cd{a} and \cd{testModel}.  Usually, the
\cd{setup} code will be where information about the model
structure is determined, and then the \cd{run} code can use that
information without repeatedly, redundantly recomputing it.  A
nimbleFunction can
be called repeatedly (one can think of it as a generator), each time returning a specialized
nimbleFunction. 
  
Readers familiar with object-oriented programming may find it useful
to think in terms of class definitions and objects.  \cd{nimbleFunction}
creates a class definition.  Each specialized nimbleFunction is one object
in the class.  The setup arguments are used to define member data in
the object. 

\section{Using and compiling nimbleFunctions}
\label{sec:using-comp-nimbl}

To compile the nimbleFunction, together with its model, we use \cd{compileNimble}:

<<nf-compiling>>=
@ 

These have been initialized with the values from their uncompiled
versions and can be used in the same way:

<<nf-using>>=
@ 

\section{Writing setup code}

\subsection{Useful tools for setup functions}

The setup function is typically used to determine information on nodes
in a model, set up modelValues or nimbleList objects, set up (nested) nimbleFunctions 
or nimbleFunctionLists, and set up any persistent numeric objects.
For example, the setup code of an MCMC nimbleFunction creates the
nimbleFunctionList of sampler nimbleFunctions.  The values of numeric
objects created in setup code can be modified by run code and will
persist across calls.

Some of the useful tools and objects to create in setup functions include:

\begin{description}
\item[vectors of node names, often from a model] Often these are obtained from the
  \cd{getNodeNames}, \\\cd{getDependencies}, and other methods of a model,
  described in Sections \ref{sec:accessing-variables}-\ref{sec:nodeInfo}.
\item[modelValues objects] These are discussed in Sections \ref{sec:modelValues-struct} and \ref{sec:access-model-modelv}.
\item[nimbleList objects]  New instances of \cd{nimbleList}s can
  be created from a nimbleList definition in either setup or run code. See Section \ref{sec:nimbleLists} for more information.
  % Comment: It is actually sketchy that we allow a nimbleList
  % definition to be created in setup code, because it would  have to
  % be the same definition always used by all specializations.  So
  % I've put the emphasis here on creating nimbleList objects. -PdV
\item[specializations of other nimbleFunctions] A useful NIMBLE
  programming technique is to have one nimbleFunction contain other
  nimbleFunctions, which it can use in its run-time code (Section \ref{sec:using-other-nimbl}).
\item[lists of other nimbleFunctions] In addition to containing single
  other nimbleFunctions, a nimbleFunction can contain a list of other
  nimbleFunctions (Section \ref{sec:virt-nimbl-nimbl}).
\end{description}


If one wants a nimbleFunction that does get specialized but has
empty setup code, use \cd{setup = function() \{\}} or \cd{setup =
  TRUE}.  

\subsection{Accessing and modifying numeric values from setup}
\label{sec:access-modify-numer}

While models and nodes created during setup cannot be
modified\footnote{Actually, they can be, but only for uncompiled nimbleFunctions.},
numeric values and modelValues can be, as illustrated by extending the example from above.

<<nf-modifyValueToAdd>>=
@ 

\subsection{Determining numeric types in nimbleFunctions}
  
For numeric variables from the \cd{setup} function that
  appear in the \cd{run} function or other member functions (or
  are declared in \cd{setupOutputs}), the
  type is determined from the values created by the setup
  code. The types created by setup code must be
  consistent across all specializations of the nimbleFunction.  For
  example if \cd{X} is created as a matrix (two-dimensional double) in one
  specialization but as a vector (one-dimensional double) in another, there
  will be a problem during compilation.  The sizes may differ in each specialization.
  
   Treatment of vectors of length one presents special challenges because
  they could be treated as scalars or vectors.  Currently they are
  treated as scalars.  If you want a vector, ensure that the length is
  greater than one in the setup code and then use \cd{setSize} in the
  run-time code.

\subsection{Control of setup outputs }
\label{sec:determ-pers-texttts}

Sometimes setup code may create variables that are not used in
run code.  By default, NIMBLE inspects run code and omits
variables from setup that do not appear in run code from
compilation.  However, sometimes a programmer may want to force a
numeric or character variable to be included in compilation, even if it
is not used directly in run code.  As shown below, such variables
can be directly accessed in one nimbleFunction from another, which
provides a way of using nimbleFunctions as general data structures.
To force NIMBLE to include variables during compilation, for
example \cd{X} and \cd{Y}, simply include

<<eval = FALSE>>=
setupOutputs(X, Y)
@ 

anywhere in the setup code. 

\section{Writing run code}
\label{sec:nimble-lang-comp}

In Chapter \ref{cha:RCfunctions} we described the functionality of the NIMBLE language that could be used in run code without setup code (typically in cases where no models or modelValues are needed).   Next we explain the additional features that allow use of models and modelValues in the run code. 

\subsection{Driving models: \cd{calculate}, \cd{calculateDiff},
  \cd{simulate}, \cd{getLogProb}}
\label{sec:driv-models:-calc}

These four functions are the primary ways to operate a model.  Their
syntax was explained in Section \ref{sec:cdcalc-cdsim-cdgetl}. Except
for \cd{getLogProb}, it is usually important for the \cd{nodes}
vector to be sorted in
topological order.  Model member functions such as \cd{getDependencies} and
\cd{expandNodeNames} will
always return topoligically sorted node names.

Most R-like indexing of a node vector is allowed within the
argument to \cd{calculate}, \cd{calculateDiff}, \cd{simulate}, and \cd{getLogProb}. For example, all of the following are allowed:

<<eval=FALSE>>=
myModel$calculate(nodes)
myModel$calculate(nodes[i])
myModel$calculate(nodes[1:3])
myModel$calculate(nodes[c(1,3)])
myModel$calculate(nodes[2:i])
myModel$calculate(nodes[ values(model, nodes) + 0.1 < x ])
@ 

Note that one cannot create new vectors of nodes in run code.  They
can only be indexed within a call to \cd{calculate}, \cd{calculateDiff},
\cd{simulate} or \cd{getLogProb}.

\subsection{Getting and setting variable and node values}

\subsubsection{Using indexing with nodes}
  

Here is an example that illustrates getting and setting of nodes,
subsets of nodes, or variables.  Note the following:

\begin{itemize}
  \item In \cd{model[[v]]}, \cd{v} can only be a single node or variable name, not a vector of multiple nodes nor an element of such a vector (\cd{model[[ nodes[i] ]]} does not work).  The node itself may be a vector, matrix or array node.
  \item In fact, \cd{v} can be a node-name-like character string, even if it is not actually a node in the model.  See example 4 in the code below.
  \item One can also use \cd{model\$varName}, with the caveat that \cd{varName} must be a variable name.  This usage would only make sense for a nimbleFunction written for models known to have a specific variable.  (Note that if \cd{a} is a scalar node in \cd{model}, then \cd{model[['a']]} will be a scalar but \cd{model\$a} will be a vector of length 1.)
 \item one should use the \cd{<<-} global assignment operator to assign into model nodes. 
\end{itemize}

Note that NIMBLE does not allow variables to change dimensions.  Model nodes are the same, and indeed are more restricted because they can't change sizes.  In addition, NIMBLE distinguishes between scalars and vectors of length 1.  These rules, and ways to handle them correctly, are illustrated in the following code as well as in section \ref{sec:how-nimble-handles}.


<<getSetInRunCode, message=FALSE>>=

code <- nimbleCode({
    z ~ dnorm(0, sd = sigma)
    sigma ~ dunif(0, 10)
    y[1:n] ~ dmnorm(zeroes[1:n], cov = C[1:5, 1:5])
})
n <- 5
m <- nimbleModel(code, constants = list(n = n, zeroes = rep(0, n),
                                        C = diag(n)))
cm <- compileNimble(m)

nfGen <- nimbleFunction(
    setup = function(model) {
    ## node1 and node2 would typically be setup arguments, so they could
    ## have different values for different models.  We are assigning values
    ## here so the example is clearer.
        node1 <- 'sigma'            ## a scalar node 
        node2 <- 'y[1:5]'           ## a vector node
        notReallyANode <- 'y[2:4]'  ## y[2:4] allowed even though not a node!
    },
    run = function(vals = double(1)) {
        tmp0 <- model[[node1]]           # 1. tmp0 will be a scalar
        tmp1 <- model[[node2]]           # 2. tmp1 will be a vector
        tmp2 <- model[[node2]][1]        # 3. tmp2 will be a scalar
        tmp3 <- model[[notReallyANode]]  # 4. tmp3 will be a vector
        tmp4 <- model$y[3:4]      # 5. hard-coded access to a model variable
        # 6. node1 is scalar so can be assigned a scalar:
        model[[node1]] <<- runif(1) 
        model[[node2]][1] <<- runif(1) 
                 # 7. an element of node2 can be assigned a scalar 
        model[[node2]] <<- runif(length(model[[node2]]))
                 # 8. a vector can be assigned to the vector node2
        model[[node2]][1:3] <<- vals[1:3] 
             ## elements of node2 can be indexed as needed
        returnType(double(1))
        out <- model[[node2]] ## we can return a vector   
        return(out)
    }
    )
    
Rnf <- nfGen(m)
Cnf <- compileNimble(Rnf)
Cnf$run(rnorm(10))
@


Use of \cd{[[ ]]} allows one to programmatically access a node based on a character variable containing the node name; this character variable would generally be set in setup code. In contrast, use of \cd{\$} hard codes the variable name and would not generally be suitable for nimbleFunctions intended for use with arbitrary models.


\subsubsection{Getting and setting more than one model node or variable
  at a time using \cd{values}}
\label{sec:getting-setting-more}

Sometimes it is useful to set a collection of nodes or variables at
one time.  For example, one might want a nimbleFunction that will
serve as the objective function for an optimizer.  The input to the
nimbleFunction would be a vector, which should be used to fill a
collection of nodes in the model before calculating their log
probabilities.  This can be done using \cd{values}:

<<eval=FALSE>>=
## get values from a set of model nodes into a vector
P <- values(model, nodes)
## or put values from a vector into a set of model nodes
values(model, nodes) <- P
@ 

where the first line would assign the collection of values from \cd{nodes}
into \cd{P}, and the second would do the inverse.  In both cases, values
from nodes with two or more dimensions are flattened into a vector in
column-wise order.

\cd{values(model, nodes)} may be used as a
vector in other expressions, e.g.,
<<eval=FALSE>>=
Y <- A %*% values(model, nodes) + b
@ 

One can also index elements of nodes in the argument to values, in the same manner as discussed for \cd{calculate} and related functions in Section \ref{sec:driv-models:-calc}.

Note again the potential for confusion between scalars and vectors of
length 1. \cd{values} returns a vector and expects a vector when used
on the left-hand side of an assignment.  If only a single value is
being assigned, it must be a vector of length 1, not a scalar.  This
can be achieved by wrapping a scalar in \cd{c()} when necessary.
For example:

<<eval=FALSE>>=
## c(rnorm(1)) creates vector of length one:
values(model, nodes[1]) <- c(rnorm(1)) 
## won't compile because rnorm(1) is a scalar
# values(model, nodes[1]) <- rnorm(1)  

out <- values(model, nodes[1]) ## out is a vector
out2 <- values(model, nodes[1])[1] ## out2 is a scalar
@ 


\subsection{Getting parameter values and node bounds}

Sections \ref{sec:getParam}-\ref{sec:getBound} describe how to get the parameter values for a node and the range (bounds) of possible values for the node using  \cd{getParam} and \cd{getBound}. Both of these can be used in run code. 

\subsection{Using modelValues objects}
\label{sec:access-model-modelv}


The \cd{modelValues} structure was introduced in Section
\ref{sec:modelValues-struct}.  Inside nimbleFunctions, modelValues are
designed to easily save values from a model object during the running
of a nimbleFunction. A modelValues object used in run code
must always exist in the setup code, either by passing it in as a
setup argument or creating it in the setup code.
  
To illustrate this, we will create a nimbleFunction for computing
importance weights for importance sampling. This function will use two
modelValues objects.  \cd{propModelValues} will contain a set of
values simulated from the importance sampling distribution and a field \cd{propLL}
for their log
probabilities (densities).  \cd{savedWeights} will contain the
difference in log probability (density) between the model and the
\cd{propLL} value provided for each set of values.   

<<mv-setup-code>>=
@
  
  The simplest way to pass values back and forth between models and
  modelValues inside of a nimbleFunction is with \cd{copy}, which
  has the synonym \cd{nimCopy}. See \cd{help(nimCopy)} for argument details.
  
  %% This takes arguments 
  %% \begin{description}
  %% \item[\cd{from}, \cd{to}] which can either be models or modelValues
  %% \item[\cd{row}, \cd{rowTo}] which refers to the rows of a
  %%   modelValues object, if either \cd{from} or \cd{to} is a
  %%   modelValues. If \cd{rowTo} is omitted, it is assumed to be equal to \cd{row} if necessary.
  %%   \item[\cd{nodes}, \cd{nodesTo}] which is a vector of the names of the nodes
  %%     to be copied.  The node names will be expanded when variable names are provided.  If
  %%     \cd{nodesTo} is omitted it will be set equal to \cd{nodes}.
  %% \end{description}
  
%  TODO: CHECK THESE USAGES
  
  Alternatively, the values may be accessed via indexing of individual
  rows, using the notation \cd{mv[var, i]}, where \cd{mv} is a
  modelValues object, \cd{var} is a variable name (not a node name),
  and \cd{i} is a row number. Likewise, the \cd{getsize} and
  \cd{resize} functions can be used as discussed in Section \ref{sec:modelValues-struct}. However the function
  \cd{as.matrix} does not work in run code.
  
  Here is a run function to use these modelValues:
  
<<mv-run-time>>=
@

Once the nimbleFunction is built, the modelValues object can be accessed
using \cd{\$}, which is shown in more detail below.  In
fact, since modelValues, like most NIMBLE objects, are reference class
objects, one can get a reference to them before the function is
executed and then use that reference afterwards.
  
<<mv-compilation-example>>=
@

Importance sampling could also be written using simple vectors for the
weights, but we illustrated putting them in a modelValues object along
with model variables.

\subsection{Using model variables and modelValues in expressions}
\label{sec:using-model-variable}

Each way of accessing a variable, node, or modelValues can be used amidst mathematical
expressions, including with indexing, or passed to another
nimbleFunction as an argument.  For example, the following two
statements would be valid:

<<eval = FALSE>>=
model[["x[2:8, ]"]][2:4, 1:3] %*% Z
@ 
if Z is a vector or matrix, and

<<eval = FALSE>>=
C[6:10] <- mv[v, i][1:5, k] + B
@ 
if B is a vector or matrix.

The NIMBLE language allows scalars, but models defined from BUGS code
are never created as purely
scalar nodes.  Instead, a single node such as defined by \cd{z $\sim$
  dnorm(0, 1)} is implemented as a vector of length 1, similar to R.
When using \cd{z} via \cd{model\$z} or \cd{model[["z"]]}, NIMBLE
will try to do the right thing by treating this as a scalar.  In the
event of problems\footnote{Please tell us!}, a more explicit way to
access \cd{z} is \cd{model\$z[1]} or \cd{model[["z"]][1]}.



\subsection{Including other methods in a nimbleFunction}
\label{sec:incl-other-meth}

Other methods can be included with the \cd{methods} argument to
\cd{nimbleFunction}.  These methods can use the objects created in
setup code in just the same ways as the run function.  In
fact, the run function is just a default main method name. Any method can then call another method.

<<usingMemberFunctions>>=
@ 

\subsection{Using other nimbleFunctions}
\label{sec:using-other-nimbl}

One nimbleFunction can use another nimbleFunction that was passed to
it as a setup argument or was created in the setup function.  This can
be an effective way to program.  When a nimbleFunction needs to
access a setup variable or method of another nimbleFunction, use
\cd{\$}. 

<<owningMemberFunctions>>=
@ 


% CJP: doesn't seem to be an issue at the moment: Note that the output from the \cd{print} calls in the compiled function match those from the uncompiled function when run in an R session.  It may not be shown here because this document is created with \cd{knitr} and for some reason output printed from C++ does not make it into \cd{knitr} output.

\subsection{Virtual nimbleFunctions and nimbleFunctionLists}
\label{sec:virt-nimbl-nimbl}

Often it is useful for one nimbleFunction to have a list of other
nimbleFunctions, all of whose methods have the same arguments and return
types.  For example, NIMBLE's MCMC engine contains a list of samplers that
are each nimbleFunctions.

To make such a list, NIMBLE provides a way to declare the arguments
and return types of methods: virtual nimbleFunctions created by
\cd{nimbleFunctionVirtual}.  Other nimbleFunctions can inherit from
virtual nimbleFunctions, which in R is called ``containing'' them.
Readers familiar with object oriented programming will recognize this
as a simple class inheritance system.  In Version \ver\ it is limited to
simple, single-level inheritance.

Here is how it works:

<<nimbleFunctionLists>>=
@ 


One can also use \cd{seq\_along} with nimbleFunctionLists (and only with nimbleFunctionLists). As in R, \cd{seq\_along(myFunList)}  is equivalent to
\cd{1:length(myFunList)} if the length of \cd{myFunList} is greater
than zero.  It is an empty sequence if the length is zero.

Virtual nimbleFunctions cannot define setup values to be inherited.


\subsection{Character objects}

NIMBLE provides limited uses of character objects in run code.
Character vectors created in setup code will be available in
run code, but the only thing you can really do with them is
include them in a \cd{print} or \cd{stop} statement.  

Note that character vectors of model node and variable names are
processed during compilation.  For example, in \cd{model[[node]]}, \cd{node}
may be a character object, and the NIMBLE compiler processes this
differently than \cd{print("The node name was ", node)}.  In the
former, the NIMBLE compiler sets up a C++ pointer directly to the
\cd{node} in the \cd{model}, so that the character content of
\cd{node} is never needed in C++.  In the latter, \cd{node} is used as
a C++ string and therefore is needed in C++.


\subsection{User-defined data structures}
\label{sec:user-defined-data}


Before the introduction of nimbleLists in Version 0.6-4, NIMBLE did not explicitly have user-defined data structures. An alternative way to create a data structure in NIMBLE is to use nimbleFunctions to achieve a similar effect.  To do so, one can define setup code with whatever variables are wanted and ensure
they are compiled using \cd{setupOutputs}.  Here is an example:

<<dataStructures>>=
@ 

You'll notice that:
\begin{itemize}
\item After execution of the compiled function, access to
the \cd{X}, \cd{Y}, and \cd{Z} is the same as for the
uncompiled case. This occurs because \cd{CmyUseDataNF} is an interface
to the compiled version of \cd{myUseDataNF}, and it provides access to
member objects and functions.  In this case, one member object is
\cd{myDataNF}, which is an interface to the compiled version of
\cd{myUseDataNF\$myDataNF}, which in turn provides access to \cd{X},
\cd{Y}, and \cd{Z}.  To reduce memory use, NIMBLE defaults to
\textit{not} providing full interfaces to nested nimbleFunctions like
\cd{myUseDataNF\$myDataNF}.  In this example we made it provide full
interfaces by setting the
\cd{buildInterfacesForCompiledNestedNimbleFunctions} option via
\cd{nimbleOptions} to TRUE.  If we had left that option FALSE (its
default value), we could still get to the values of interest using

<<eval=FALSE>>=
valueInCompiledNimbleFunction(CmyDataNF, 'X')
@ 


\item We need to take care that at the time of compilation, the
  \cd{X}, \cd{Y} and \cd{Z} values contain doubles via
  \cd{as.numeric} so that they are not compiled as integer objects.
\item The \cd{myDataNF} could be created in the setup code.  We just
  provided it as a setup argument to illustrate that option.
\end{itemize}


\section{Example: writing user-defined samplers to extend NIMBLE's MCMC engine}
\label{sec:user-samplers}

One important use of nimbleFunctions is to write additional samplers that can be used in NIMBLE's MCMC engine. This allows a user to write a custom sampler for one or more nodes in a model, as well as for programmers to provide general samplers for use in addition to the library of samplers provided with NIMBLE. 

The following code illustrates how a NIMBLE developer would implement and use a Metropolis-Hastings random walk sampler with fixed proposal standard deviation.

<<custom-sampler, eval=FALSE>>=
my_RW <- nimbleFunction(
    
    contains = sampler_BASE,
    
    setup = function(model, mvSaved, target, control) {
        ## proposal standard deviation
        scale <- if(!is.null(control$scale)) control$scale else 1
        calcNodes <- model$getDependencies(target)
    },
    
    run = function() {
        ## initial model logProb
        model_lp_initial <- getLogProb(model, calcNodes) 
        ## generate proposal
        proposal <- rnorm(1, model[[target]], scale)     
        ## store proposal into model
        model[[target]] <<- proposal                    
        ## proposal model logProb
        model_lp_proposed <- calculate(model, calcNodes)
        
        ## log-Metropolis-Hastings ratio
        log_MH_ratio <- model_lp_proposed - model_lp_initial
        
        ## Metropolis-Hastings step: determine whether or
        ## not to accept the newly proposed value
        u <- runif(1, 0, 1)
        if(u < exp(log_MH_ratio)) jump <- TRUE
        else                      jump <- FALSE

        ## keep the model and mvSaved objects consistent
        if(jump) copy(from = model, to = mvSaved, row = 1, 
                         nodes = calcNodes, logProb = TRUE)
        else     copy(from = mvSaved, to = model, row = 1,
                         nodes = calcNodes, logProb = TRUE)
    },
    
    methods = list(   reset = function () {}   )
)
@ 

The name of this sampler function, for the purposes of using it in an  
MCMC algorithm, is \cd{my\_RW}.  Thus, this sampler can be added 
to an exisiting MCMC configuration object \cd{conf} using:

<<custom-sampler-add, eval=FALSE>>=
mcmcConf$addSampler(target = 'x', type = 'my_RW',
                    control = list(scale = 0.1))
@ 

To be used within the MCMC engine, sampler functions definitions must
adhere exactly to the following:

\begin{itemize}
  \item The nimbleFunction must include the contains statement \cd{contains = sampler\_BASE}.
    \item The \cd{setup} function must have the four arguments
      \cd{model, mvSaved, target, control}, in that order.
      \item The \cd{run} function must accept no arguments, and have
        no return value.  Further, after execution it must leave the \cd{mvSaved}
        modelValues object as an up-to-date copy of the values and
        logProb values in the model object.
        \item The nimbleFunction must have a member method called \cd{reset}, which takes no arguments 
          and has no return value.
\end{itemize}

The purpose of the \cd{setup} function is generally two-fold.  First,
to extract control parameters from the \cd{control} list; in the
example, the proposal standard deviation \cd{scale}.  It is good
practice to specify default values for any control parameters that are
not provided in the \cd{control} argument, as done in the example.  Second, to
generate any sets of nodes needed in the \cd{run} function.  In many
sampling algorithms, as here, \cd{calcNodes} is used to represent the
target node(s) and dependencies up to the first layer of
stochastic nodes, as this is precisely what is required for
calculating the Metropolis-Hastings acceptance probability.  These
probability calculations are done using \cd{model\$calculate(calcNodes)}.

In the \cd{run} function, the \cd{mvSaved} modelValues object is kept up-to-date with
the current state of the model, depending on whether the proposed
changed was accepted.  This is done using the \cd{copy} function, to copy values between the model and \cd{mvSaved} objects.
        
        
        
\section{Copying nimbleFunctions (and NIMBLE models)}

{
NIMBLE relies heavily on R's reference class system.  When models,
modelValues, and nimbleFunctions with setup code are created, NIMBLE
generates a new, customized reference class definition for each.  As a
result, objects of these types are passed by reference and hence
modified in place by most NIMBLE operations. This is necessary to
avoid a great deal of copying and returning and having to reassign
large objects, both in processing models and nimbleFunctions  and in
running algorithms.

One cannot generally copy NIMBLE models or nimbleFunctions
(specializations or generators) in a safe fashion, because of the
references to other objects embedded within NIMBLE objects. However,
the model member function \cd{newModel} will create a new copy of
the model from the same model definition
(Section \ref{sub:multiple-instances}). This new model can then be used with
newly instantiated nimbleFunctions.

%% <<copy-model>>=
%% newPump <- pumpModel$newModel()
%% @ 

The reliable way to create new copies of nimbleFunctions is to re-run
the R function called \cd{nimbleFunction} and record the result in a
new object.  For example, say you have a \cd{nimbleFunction} called
\cd{foo} and 1000 instances of \cd{foo} are compiled as part of an
algorithm related to a model called \cd{model1}.  If you then need to use \cd{foo} in
an algorithm for another model, \cd{model2}, doing so may work without
any problems.  However, there are cases where the NIMBLE compiler will
tell you during compilation that the second set of \cd{foo} instances
cannot be built from the previous compiled version.  A solution is to
re-define \cd{foo} from the beginning -- i.e. call \cd{nimbleFunction}
again -- and then proceed with building and compiling the algorithm
for \cd{model2}.  

\section{Debugging nimbleFunctions}
\label{sec:debugging}

One of the main reasons that NIMBLE provides an R (uncompiled) version
of each nimbleFunction is for debugging. One can call \cd{debug} on
nimbleFunction methods (in particular the main \nm{run} method, e.g., \cd{debug(mynf\$run}) and
then step through the code in R using R's debugger. One can also
insert \cd{browser} calls into run code and then run the
nimbleFunction from R. 

In contrast, directly debugging a compiled nimbleFunction is
difficult, although those familiar with running R through a debugger
and accessing the underlying C code may be able to operate similarly
with NIMBLE code.
We often resort to using \cd{print} statements for debugging compiled code.
Expert users fluent in C++ may also try setting \cd{nimbleOptions(pauseAfterWritingFiles = TRUE)} and adding debugging code into the generated C++ files.

\section{Timing nimbleFunctions with \cd{run.time}}

If your nimbleFunctions are correct but slow to run, you can use benchmarking tools to look for bottlenecks and to compare different implementations.
If your functions are very long-running (say 1ms or more), then standard R benchmarking tools may suffice, e.g. the \cd{microbenchmark} package

<<microbenchmark, eval=FALSE>>=
library(microbenchmark)
microbenchmark(myCompiledFunVersion1(1.234),
               myCompiledFunVersion2(1.234))  # Beware R <--> C++ overhead!
@

If your nimbleFunctions are very fast, say under 1ms, then \cd{microbenchmark} will be inacurate due to R-to-C++ conversion overhead (that won't happen in your actual functions).
To get timing information in C++, NIMBLE provides a \cd{run.time} function that avoids the R-to-C++ overhead.

<<run.time, eval=FALSE>>=
myMicrobenchmark <- compileNimble(nimbleFunction(
    run = function(iters = integer(0)){
        time1 <- run.time({
            for (t in 1:iters) myCompiledFunVersion1(1.234)
        })
        time2 <- run.time({
            for (t in 1:iters) myCompiledFunVersion2(1.234)
        })
        return(c(time1, time2))
        returnType(double(1))
    }))
print(myMicroBenchmark(100000))
@

\section{Reducing memory usage}

NIMBLE can create a lot of objects in its processing, and some of them
use R features such as reference classes that are heavy in memory
usage.  We have noticed that building large models can use lots of
memory.  To help alleviate this, we provide two options, which can be
controlled via \cd{nimbleOptions}.

As noted above, the option \cd{buildInterfacesForCompiledNestedNimbleFunctions} 
defaults to FALSE, which means NIMBLE will not build full interfaces to compiled
nimbleFunctions that ony appear within other nimbleFunctions.  If you
want access to all such nimbleFunctions, use the option 
\cd{buildInterfacesForCompiledNestedNimbleFunctions = TRUE}.

The option \cd{clearNimbleFunctionsAfterCompiling} is more drastic, and it is
experimental, so ``buyer beware''.  This will clear much of the
contents of an uncompiled nimbleFunction object after it has been
compiled in an effort to free some memory.  We expect to be able to
keep making NIMBLE more efficient -- faster execution and lower memory
use -- in the future.


%% \subsection{rankSample}
%% \label{sec:ranksample}

