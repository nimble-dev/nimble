\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

% \chapter{Introduction to programming in NIMBLE}
% \label{cha:intro-programming}


Part \ref{part:programming} is the programmer's guide to NIMBLE. At the heart of programming in NIMBLE are nimbleFunctions.  These support two principal features: (1) a \nm{setup} function that is run once for each model, nodes, or other setup arguments, and (2) \nm{run} functions that will be compiled to C++ and are written in a subset of R enhanced with features to operate models.  Formally, what can be compiled comprises the NIMBLE language, which is designed to be R-like.

This part of the manual is organized as follows:

\begin{itemize}
\item Chapter \ref{cha:RCfunctions} describes how to write simple nimbleFunctions, which have no setup code and hence don't interact with models, to compile parts of R for fast calculations. This covers the subset of R that is compilable, how to declare argument types and return types, and other information.

\item Chapter \ref{cha:user-defined} explains how to write nimbleFunctions that can be included in BUGS code as user-defined distributions or user-defined functions.

\item Chapter \ref{cha:using-bugs-models} introduces more features of NIMBLE models that are useful for writing nimbleFunctions to use models, focusing on how to query model structure and carry out model calculations.  

\item Chapter \ref{cha:data-structures} introduces two kinds of data structures: \cd{modelValues} are used for holding multiple sets of values of model variables; \cd{nimbleList} data structures are similar to R lists but require fixed element names and types, allowing the NIMBLE compiler to use them. 

\item Chapter \ref{cha:progr-with-models} draws on the previous chapters to show how to write nimbleFunctions that work with models, or more generally that have a setup function for any purpose.  Typically a setup function queries model structure (Chapter \ref{cha:using-bugs-models}) and may establish some \cd{modelValues} or \cd{nimbleList} data structures or configurations (Chapter \ref{cha:data-structures}).  Then \nm{run} functions written in the same way as simple nimbleFunctions (Chapter \ref{cha:RCfunctions}) along with model operations (Chapter \ref{cha:using-bugs-models}) define algorithm computations that can be compiled via C++.

\end{itemize}
