%% See http://yihui.name/knitr/demo/child/ for documentation on the parent/child document system of knitr

\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

\chapter{Writing models in NIMBLE's dialect of BUGS}
\label{cha:writing-models}

Models in NIMBLE are written using a variation on the BUGS language.
From BUGS code, NIMBLE  creates a model object.  This chapter
describes NIMBLE's version of BUGS.  The next chapter explains how to
build and manipulate model objects.


% With NIMBLE you can also define your own distributions and functions for use in BUGS code; discussion of this functionality is deferred to Chapter \ref{cha:user-defined} as it requires the use of nimbleFunctions. 


\section{Comparison to BUGS dialects supported by WinBUGS, OpenBUGS and JAGS}
\label{sec:supp-feat-bugs}

Many users will come to NIMBLE with some familiarity with WinBUGS,
OpenBUGS, or JAGS, so we start by summarizing how NIMBLE is similar to
and different from those before documenting NIMBLE's version of BUGS
more completely.  In general, NIMBLE aims to be compatible with the
original BUGS language and also JAGS' version.  However, at this
point, there are some features not supported by NIMBLE, and there are
some extensions that are planned but not implemented.

\subsection{Supported features of BUGS and JAGS}

\begin{enumerate}
\item Stochastic and deterministic\footnote{NIMBLE calls non-stochastic nodes ``deterministic'', whereas BUGS calls them ``logical''. NIMBLE uses ``logical'' in the way R does, to refer to boolean (TRUE/FALSE) variables.} node declarations.
\item Most univariate and multivariate distributions.
\item Link functions.
\item Most mathematical functions.
\item ``for'' loops for iterative declarations.
\item Arrays of nodes up to 4 dimensions.
\item Truncation and censoring as in JAGS using the \cd{T()}
  notation and \cd{dinterval}.
\end{enumerate}

\subsection{NIMBLE's Extensions to BUGS and JAGS}
\label{sec:extensions-bugs}

NIMBLE extends the BUGS language in the following ways:

\begin{enumerate}
  \item User-defined functions and distributions -- written as nimbleFunctions -- can be used in model code. See Chapter \ref{cha:user-defined}.
\item Multiple parameterizations for distributions, similar to those  in R, can be used.
\item Named parameters for distributions and functions, similar to R function calls, can be used.
\item Linear algebra, including for vectorized
  calculations of simple algebra, can be used in deterministic declarations.
\item Distribution parameters can be expressions, as in JAGS but not
  in WinBUGS.  Caveat: parameters to \emph{multivariate}
  distributions (e.g., \cd{dmnorm}) cannot be expressions (but an expression can be defined in a separate deterministic expression and the resulting variable then used). % still true. -Perry
 \item Alternative models can be defined from the same model code by
   using if-then-else statements that are evaluated when the model is defined.
\item More flexible indexing of vector nodes within larger variables is allowed.  For example one can place a multivariate normal vector arbitrarily within a higher-dimensional object, not just in the last index.
\item More general constraints can be declared using \cd{dconstraint}, which extends the concept of JAGS' \cd{dinterval}.
 \item Link functions can be used in stochastic, as well as
   deterministic, declarations.\footnote{But beware of the possibility
     of needing to set values for ``lifted'' nodes created by NIMBLE.}
 \item Data values can be reset, and which parts of a model are flagged as data can be changed, allowing one model to be used for different data sets without rebuilding the model each time.
   \item As of Version 0.6-6 we now support stochastic/dynamic indexes. More specifically in earlier versions all indexes needed to be constants. Now indexes can be other nodes or functions of other nodes. For a given dimension of a node being indexed, if the index is not constant, it must be a scalar value. So expressions such as \cd{mu[k[i], 3]} or \cd{mu[k[i], 1:3]} or \cd{mu[k[i], j[i]]} are allowed, but not \cd{mu[k[i]:(k[i]+1)]}. Nested dynamic indexes such as \cd{mu[k[j[i]]]} are also allowed. 
  \end{enumerate}
  
\subsection{Not-yet-supported features of BUGS and JAGS}
\label{sec:not-yet-supported}

In this release, the following are not supported.

\begin{enumerate}
\item The appearance of the same node on the left-hand side of both a
  \cd{<-} and a \cd{$\sim$} declaration (used in WinBUGS for data
  assignment for the value of a stochastic node).
\item Multivariate nodes must appear with brackets, even if they are
    empty. E.g., \cd{x} cannot be multivariate but \cd{x[]} or
    \cd{x[2:5]} can be.
\item NIMBLE generally determines the dimensionality and
  sizes of variables from the BUGS code.  However, when a variable
  appears with blank indices, such as in \cd{x.sum <- sum(x[])},
  and if the dimensions of the variable are not clearly defined in
  other declarations, NIMBLE currently requires that the dimensions of
  x be provided when the model object is created (via \cd{nimbleModel}).
\end{enumerate}

\section{Writing models}

Here we introduce NIMBLE's version of BUGS.  The WinBUGS, OpenBUGS and
JAGS manuals are also useful resources for writing BUGS models,
including many examples.

\subsection{Declaring stochastic and deterministic nodes}

BUGS is a declarative language for graphical (or hierarchical) models.
Most programming languages are imperative, which means a series of
commands will be executed in the order they are written.  A
declarative language like BUGS is more like building a machine before
using it.  Each line declares that a component should be plugged into
the machine, but it doesn't matter in what order they are declared as
long as all the right components are plugged in by the end of the code.

The machine in this case is a graphical model\footnote{Technically, a
  \textit{directed acyclic graph}}.  A \textit{node} (sometimes called
a \textit{vertex}) holds one value, which may be a scalar or a vector.
\textit{Edges} define the relationships between nodes.  A huge variety
of statistical models can be thought of as graphs.  

Here is the code to define and create a simple linear regression model with four observations. 

<<chunk-WMinit, echo = FALSE>>=
## source the code
read_chunk(file.path('chunks', 'writingModels_chunks.R'))  # one can put code chunks here if one wants
@ 

<<linearRegressionGraph, fig.height=10, fig.width=20, fig.cap="Graph of a linear regression model">>=
@ 

The graph representing the model is 
shown in Figure \ref{fig:linearRegressionGraph}.  Each observation,
\cd{y[i]}, is a node whose edges say that it follows a normal
distribution depending on a predicted value, \cd{predicted.y[i]}, and
standard deviation, \cd{sigma}, which are each nodes.  Each predicted
value is a node whose edges say how it is calculated from \cd{slope},
\cd{intercept}, and one value of an explanatory variable, \cd{x[i]},
which are each nodes.

This graph is created from the following BUGS code:

<<linearRegressionCode, eval=FALSE>>=
@ 

In this code, stochastic relationships are declared with ``$\sim$''
and deterministic relationships are declared with ``\cd{<-}''.  For
example, each \cd{y[i]} follows a normal distribution with mean
\cd{predicted.y[i]} and standard deviation
\cd{sigma}.  Each
\cd{predicted.y[i]} is the result of \cd{intercept + slope * x[i]}.
The for-loop yields the equivalent of writing four lines of code, each
with a different value of \cd{i}.  It does not matter in what order
the nodes are declared.  Imagine that each line of code draws part of
Figure \ref{fig:linearRegressionGraph}, and all that matters is that
the everything gets drawn in the end.  Available distributions, default and alternative
  parameterizations, and functions are listed in Section \ref{subsec:dists-and-functions}.

An equivalent graph can be created by this BUGS code:

<<linearRegressionAltCode, eval=FALSE>>=
@ 

In this case, the \cd{predicted.y[i]} nodes in Figure
\ref{fig:linearRegressionGraph} will be created automatically by
NIMBLE and will have a different name, generated by NIMBLE.

\subsection{More kinds of BUGS declarations}
\label{sec:more-kinds-bugs}

Here are some examples of valid lines of BUGS code.  This code does
not describe a sensible or complete model, and it includes some
arbitrary indices (e.g. \cd{mvx[8:10, i]}) to illustrate flexibility.
Instead the purpose of each line is to illustrate a feature of
NIMBLE's version of BUGS.

<<didacticnimbleCode, eval=FALSE>>=
{
    ## 1. normal distribution with BUGS parameter order
    x ~ dnorm(a + b * c, tau) 
    ## 2. normal distribution with a named parameter
    y ~ dnorm(a + b * c, sd = sigma) 
    ## 3. For-loop and nested indexing
    for(i in 1:N) {
        for(j in 1:M[i]) {
            z[i,j] ~ dexp(r[ blockID[i] ]) 
        }
    }
    ## 4. multivariate distribution with arbitrary indexing
    for(i in 1:3) 
        mvx[8:10, i] ~ dmnorm(mvMean[3:5], cov = mvCov[1:3, 1:3, i])
    ## 5. User-provided distribution
    w ~ dMyDistribution(hello = x, world = y) 
    ## 6. Simple deterministic node
    d1 <- a + b
    ## 7. Vector deterministic node with matrix multiplication
    d2[] <- A[ , ] %*% mvMean[1:5] 
    ## 8. Deterministic node with user-provided function
    d3 <- foo(x, hooray = y) 
}
@ 

When a variable appears only on the right-hand side, it can be provided via \cd{constants} (in which case it can never be changed) or via \cd{data} or \cd{inits}, as discussed in Chapter \ref{cha:building-models}.  

Notes on the comment-numbered lines are:

\begin{enumerate}
\item \cd{x} follows a normal distribution with mean \cd{a + b*c} and precision \cd{tau} (default BUGS second parameter for \cd{dnorm}).
\item \cd{y} follows a normal distribution with the same mean as \cd{x} but a named standard deviation parameter instead of a precision parameter (sd = 1/sqrt(precision)).
\item \cd{z[i, j]} follows an exponential distribution with parameter
  \cd{r[ blockID[i] ]}.  This shows how for-loops can be used for indexing of variables containing
  multiple nodes.  Variables that define for-loop indices (\cd{N} and \cd{M}) must also be provided as constants.  
\item The arbitrary block \cd{mvx[8:10, i]} follows a multivariate
  normal distribution, with a named covariance matrix instead of BUGS'
  default of a precision matrix.  As in R, curly braces for for-loop
  contents are only needed if there is more than one line.
\item \cd{w} follows a user-defined distribution. See Chapter \ref{cha:user-defined}.
\item \cd{d1} is a scalar deterministic node that, when calculated, will be
  set to \cd{a + b}.
\item \cd{d2} is a vector deterministic node using matrix
  multiplication in R's syntax.
\item \cd{d3} is a deterministic node using a user-provided
  function.  See Chapter \ref{cha:user-defined}.
\end{enumerate}

\subsubsection{More about indexing}
\label{sec:indexing} 

Examples of allowed indexing include:
\begin{itemize}
\item \verb|x[i]|             \# a single index
\item \verb|x[i:j]|         \# a range of indices
\item \verb|x[i:j,k:l]| \# multiple single indices or ranges for higher-dimensional arrays
\item \verb|x[i:j, ]|     \# blank indices indicating the full range
\item \verb|x[3*i+7]|     \# computed indices
\item \verb|x[(3*i):(5*i+1)]|  \# computed lower and upper ends of an index range
\item \verb|x[k[i]+1]|             \# a dynamic (and computed) index
\item \verb|x[k[j[i]]]|         \# nested dynamic indexes
\item \verb|x[k[i], 1:3]|     \# nested indexing of rows or columns
  \end{itemize}
 
NIMBLE does not allow multivariate nodes to be used without
square brackets, which is an incompatibility with JAGS.  Therefore a statement like \cd{xbar <- mean(x)} in JAGS must be converted to
\cd{xbar <- mean(x[])} (if \cd{x} is a vector) or \cd{xbar <-
 mean(x[,])} (if \cd{x} is a matrix) for NIMBLE\footnote{In \cd{nimbleFunctions}
  explained in later chapters, square brackets with blank indices are
  not necessary for multivariate objects.}. Section \ref{sec:prov-dimens-via} discusses how to provide NIMBLE with dimensions of \cd{x} when needed.

Generally NIMBLE supports R-like linear algebra expressions and attempts to follow the same rules as R about
dimensions (although in some cases this is not possible).  For
example, \cd{x[1:3] \%*\% y[1:3]} converts \cd{x[1:3]} into a row
vector and thus computes the inner product, which is returned as a $1
\times 1$ matrix (use \cd{inprod} to get it as a scalar, which it typically easier).  Like in R,
a scalar index will result in dropping a dimension unless the argument
\cd{drop=FALSE} is provided.  For example, \cd{mymatrix[i, 1:3]} will
be a vector of length 3, but \cd{mymatrix[i, 1:3, drop=FALSE]} will be
a $1 \times 3$ matrix.  More about indexing and dimensions is
discussed in Section \ref{sec:manag-dimens-sizes}.

\subsection{Vectorized versus scalar declarations}
\label{subsec:vectorized-versus-scalar-declarations}

Suppose you need nodes \cd{logY[i]} that should be the log of the
corresponding \cd{Y[i]}, say for \cd{i} from 1 to 10.  Conventionally
this would be created with a for loop:
<<simpleForLoop, eval=FALSE>>=
{
    for(i in 1:10) {
        logY[i] <- log(Y[i])
    }
}
@ 

Since NIMBLE supports R-like algebraic expressions, an alternative in
NIMBLE's dialect of BUGS is to use a vectorized declaration like this:
<<simpleVecDec, eval=FALSE>>=
{
    logY[1:10] <- log(Y[1:10])
}
@ 


There is an important difference between the models that are created by the
above two methods.  The first creates 10 scalar nodes, \cd{logY[1]}
$,\ldots,$ \cd{logY[10]}.  The second creates one vector node,
\cd{logY[1:10]}.  If each \cd{logY[i]} is used separately by an algorithm, it may be more efficient computationally if they are declared as scalars.  If they are all used together,
it will often make sense to declare them as a vector.


\subsection{Available distributions}
\label{subsec:dists-and-functions}
\subsubsection{Distributions}
\label{subsec:distributions}

NIMBLE supports most of the distributions allowed in BUGS and
JAGS. Table \ref{table:distributions} lists the distributions that are
currently supported, with their default parameterizations, which match
those of BUGS\footnote{Note that the same distributions are available
  for writing \cd{nimbleFunction}s, but in that case the default
  parameterizations and function names match R's when possible. Please
  see Section \ref{sec:nimble-dist-funs} for how to use distributions
  in \cd{nimbleFunctions}.}. NIMBLE also allows one to use alternative
parameterizations for a variety of distributions as described next.
See Section \ref{sec:user-distributions} to learn how to write new distributions using nimbleFunctions.

\input{densityTableLong.tex}

\paragraph{Improper distributions}

Note that \cd{dcar\_normal}, \cd{dflat} and \cd{dhalfflat} specify improper prior distributions
and should only be used when the posterior distribution of the model is known to be proper.
Also for these distributions, the density function returns the unnormalized density
and the simulation function returns \cd{NaN} so these distributions
are not appropriate for algorithms that need to simulate from the
prior or require proper (normalized) densities.

\subsubsection{Alternative parameterizations for distributions}
\label{subsec:alternative-params}

NIMBLE allows one to specify distributions in model code using a
variety of parameterizations, including the BUGS
parameterizations. Available parameterizations are listed in Table \ref{table:distributions-alternates}.
To understand how NIMBLE handles alternative parameterizations, it is
useful to distinguish three cases, using the \cd{gamma} distribution
as an example:
\begin{enumerate}
\item A \nm{canonical} parameterization is used directly for
  computations\footnote{Usually this is the parameterization in the
  \cd{Rmath} header of R's C implementation of distributions.}.  For
  \cd{gamma}, this is (shape, scale).  
\item The BUGS parameterization is the one defined in the
  original BUGS language. In general this is the parameterization for which conjugate MCMC samplers can be executed most efficiently. For \cd{gamma}, this is (shape, rate). 
\item An \nm{alternative} parameterization is one that must be
  converted into the \nm{canonical} parameterization.  For \cd{gamma},
  NIMBLE provides both (shape, rate) and (mean, sd) parameterization
  and creates nodes to calculate (shape, scale) from either (shape,
  rate) or (mean, sd).  In the case of \cd{gamma}, the BUGS
  parameterization is also an \nm{alternative} parameterization.

\end{enumerate}

Since NIMBLE provides compatibility with existing BUGS and JAGS
code, the order of parameters places the BUGS parameterization
first.  For example, the order of parameters for \cd{dgamma} is \cd{dgamma(shape, rate, scale, mean, sd)}.  Like R, if
parameter names are not given, they are taken in order, so that (shape,
rate) is the default. This happens to  match R's order of parameters,
but it need not.  If names are given, they can be given in any
order.  NIMBLE knows that rate is an alternative to scale and that
(mean, sd) are an alternative to (shape, scale or rate). 

\input{parameterizationTableLong.tex}

Note that for multivariate normal, multivariate t, Wishart, and Inverse Wishart, the canonical
parameterization uses the Cholesky decomposition of one of the
precision/inverse scale or covariance/scale matrix. For example, for the multivariate normal, if  \cd{prec\_param=TRUE}, the \cd{cholesky} argument is treated as the Cholesky
decomposition of a precision matrix.  Otherwise it is treated as the
Cholesky decomposition of a covariance matrix. 

% In some cases it may be more efficient to use that parameterization
% directly.  % PdV removed this because it is obtuse: In what cases?
% Doesn't lifting of the cholesky computation take care of inefficiency?
% What does "use that parameterization directly" mean, when there is
% no meaning of "indirect" use of a parameterization?  

In addition, NIMBLE supports alternative distribution names, known as aliases, as in JAGS, as specified in Table \ref{table:distributions-aliases}. 

\input{densityAliasesTable.tex}


%TODO: WHAT IS THE STATUS OF THE NEXT STATEMENT?: I've added inverse gamma in 0.6-4 and will do inverse wishart in 0.6-5. Hopefully will get to some others as well soon-ish - CJP.

We plan to, but do not currently, include the following distributions as part of core NIMBLE: double exponential (Laplace), beta-binomial, Dirichlet-multinomial, F, Pareto, or forms of the multivariate t other than the standard one provided. 
% [F is easy to add as it has R functions]



\subsection{Available BUGS language functions}
\label{subsec:BUGS-lang-fxns}

Tables \ref{table:functions-bugs}-\ref{table:functions-matrix-bugs} show the
available operators and functions. 
% These are also available for \cd{nimbleFunction} programming (see Chapter \ref{cha:progr-with-models}).  In fact, BUGS model nodes are implemented as \cd{nimbleFunction}s that are custom-generated from BUGS declarations, so it would be more correct to say that functions and operators available for \cd{nimbleFunction}s are also available for the model declarations.
Support for more general R expressions
is covered in Chapter \ref{cha:RCfunctions} about programming
with nimbleFunctions. 

For the most part NIMBLE supports the functions used in BUGS and JAGS,
with exceptions indicated in the table.  Additional functions provided
by NIMBLE are also listed. Note that we provide distribution functions
for use in calculations, namely the ``p'', ``q'', and ``d'' functions.
 See Section \ref{sec:nimble-dist-funs} for details on the syntax for using distribution functions as functions in deterministic calculations, as only some parameterizations are allowed and the names of some distributions differ from those used to define stochastic nodes in a model. 

% TODO: CJP moved this material to Chap 9 - that's where it is most relevant 
% so I thought it best to go into the caveats there
%Currently ``r'' functions only return one random
%draw at a time, and the first argument must always be 1.  For
%multivariate distribution functions the \cd{prec\_param} or
%\cd{scale\_param} argument must be provided, indicating when a
%covariance or precision matrix has been given.  In a future release we
%will provide a variety of distribution functions, including density,
%cumulative distribution and quantile functions, using the same syntax
%as \cd{dnorm}, \cd{pnorm}, \cd{qnorm}.  We will also extend the
%alternative parameterizations with named parameters to
%\cd{nimbleFunctions}.

{
\footnotesize 
\LTcapwidth=\textwidth
\begin{longtable}[c]{lllcc}
 \caption{Functions operating on scalars, many of which can operate on
   each element (component-wise) of vectors and matrices. Status
   column indicates if the function is currently provided in
   NIMBLE.}    \label{table:functions-bugs}\\
\hline
 Usage & Description & Comments & Status & Accepts \\
   &  &  &  & vector input  \\
  \hline \hline \\
\endhead
\input{functionTableLong.tex}
\end{longtable}
}

{
\footnotesize
\LTcapwidth=\textwidth

\begin{longtable}[c]{lllc}
 \caption{Functions operating on vectors and matrices. Status column
  indicates if the function is currently provided in
  NIMBLE.} \label{table:functions-matrix-bugs} \\
  \hline
  Usage & Description & Comments & Status   \\
  \hline \hline \\
\endhead
\input{functionTableMatrixLong.tex}
\input{eigenSvdTableMatrixElements.tex}
 \end{longtable}
}



% [NOTE: JAGS source package has the Tex files for Martyn's manual, so we can copy the table formatting - s doc/manual/jags\_user\_manual.tex]

See Section \ref{sec:user-functions} to learn how to use nimbleFunctions to write new functions for use in BUGS code.

\subsection{Available link functions}
\label{subsec:BUGS-link}

NIMBLE allows the link functions listed in Table \ref{table:links}.

%\begin{table}[!h]
\begin{center}
\begin{longtable}{llll}
\caption{Link functions \label{table:links}} \\
 \hline
Link function         & Description & Range & Inverse \\
\hline \hline
  \endhead
\verb+cloglog(y) <- x+ & Complementary log log & $0 < y < 1$ & \verb+y <- icloglog(x)+ \\
\verb+log(y) <- x+    & Log           & $0 < y$ &  \verb+y <- exp(x)+ \\
\verb+logit(y) <- x+  & Logit         & $0 < y < 1$ &  \verb+y <- expit(x)+ \\
\verb+probit(y) <- x+ & Probit        & $0 < y < 1$ &  \verb+y <- iprobit(x)+\\
\hline
\end{longtable}
\end{center}
%\end{table}
      
Link functions are specified as functions applied to a node on the
left hand side of a BUGS expression. To handle link functions in
deterministic declarations, NIMBLE converts the declaration into an
equivalent inverse declaration.  For example, \cd{log(y) <- x} is
converted into \cd{y <- exp(x)}.  In other words, the link function is
just a simple variant for conceptual clarity.  

To handle link functions in a stochastic declaration, NIMBLE
does some processing that inserts an additional node into the model.
For example, the declaration \cd{logit(p[i]) $\sim$ dnorm(mu[i],1)}, is equivalent
to the follow two declarations: 
\begin{itemize}
\item \cd{logit\_p[i] $\sim$ dnorm(mu[i], 1)},
\item \cd{p[i] <- expit(logit\_p[i])}
\end{itemize}
where \cd{expit} is the inverse of \cd{logit}.  

Note that NIMBLE does not provide an automatic way of initializing the additional node (\cd{logit\_p[i]} in this case), which is a parent node of the explicit node (\cd{p[i]}), without explicitly referring to the additional node by the name that NIMBLE generates. 

\subsection{Truncation, censoring, and constraints}
\label{subsec:trunc}

NIMBLE provides three ways to declare boundaries on the value of a variable, each for different situations.  We introduce these and comment on their relationships to related features of JAGS and BUGS.  The three methods are:

\subsubsection{Truncation}
Either of the following forms, 
\begin{itemize}
\item \cd{x $\sim$ dnorm(0, sd = 10) T(0, a)}, or
\item \cd{x $\sim$ T(dnorm(0, sd = 10), 0, a)}, 
  \end{itemize}
  declares that \cd{x} follows a normal distribution between 0 and
  \cd{a} (inclusive of 0 and \cd{a}).  Either boundary may be omitted or may be another node, such as \cd{a} in this example.  The first form is compatible with JAGS, but in NIMBLE it can only be used when reading code from a text file.  When writing model code in R, the second version must be used.  

Truncation means the possible values of \cd{x} are limited a priori, hence the probability density of \cd{x} must be normalized\footnote{NIMBLE uses the CDF and inverse CDF (quantile) functions of a distribution to do this; in some cases if one uses truncation to include only the extreme tail of a distribution, numerical difficulties can arise.}.  In this example it would be the normal probability density divided by its integral from 0 to \cd{a}.  Like JAGS, NIMBLE also provides \cd{I} as a synonym for \cd{T} to accommodate older BUGS code, but \cd{T} is preferred because it disambiguates multiple usages of \cd{I} in BUGS.

\subsubsection{Censoring} Censoring refers to the situation where one datum gives the lower or upper bound on an unobserved random variable.  This is common in survival analysis, when for an individual still surviving at the end of a study, the age of death is not known and hence is ``censored'' (right-censoring).  NIMBLE adopts JAGS syntax for censoring, as follows:
 <<dinterval-example, eval=FALSE>>=
censored[i] ~ dinterval(t[i], c[i])
t[i] ~ dweib(r, mu[i])
@
In the case of right-censoring, \cd{censored[i]} should be given as \cd{data} with a value of 1 if
\cd{t[i]} is right-censored (\cd{t[i] $>$ c[i]}) and 0 if it is
observed.  The data vector for \cd{t} should have \cd{NA} (indicating
missing data) for any censored \cd{t[i]} entries. (As a result, these
nodes will be sampled in an MCMC.)  The data vector for \cd{c} should
give the censoring times corresponding to censored entries and a value
above the observed times for uncensored entries (e.g., \cd{Inf}). 
Left-censored observations would be specified by setting \cd{censored[i]} to 0 
and \cd{t[i]} to \cd{NA}. 
  

The \cd{dinterval} is not really a distribution but rather a trick: in the above example when \cd{censored[i] = 1} it gives a ``probability'' of 1 if \cd{t[i] $>$ c[i]} and 0 otherwise.  This means that \cd{t[i] $\le$ c[i]} is treated as impossible.  More generally than simple right- or left-censoring, \cd{censored[i] $\sim$ dinterval(t[i], c[i, ])} is defined such that for a vector of increasing cutpoints, \cd{c[i, ]}, \cd{t[i]} is enforced to fall within the \cd{censored[i]}-th cutpoint interval.  This is done by setting data \cd{censored[i]} as follows:
\begin{eqnarray}
\mbox{\cd{censored[i] = 0}} & \mbox{if} & \mbox{\cd{t[i] $\le$ c[i, 1]}} \nonumber \\
\mbox{\cd{censored[i] = m}} & \mbox{if} & \mbox{\cd{c[i, m] $<$ t[i] $\le$ c[i, m+1]} for } 1 <= m <= M \nonumber \\
\mbox{\cd{censored[i] = M}} & \mbox{if} & \mbox{\cd{c[i, M] $<$ t[i]}}.\nonumber
\end{eqnarray}
(The \cd{i} index is provided only for consistency with the previous example.)  The most common uses of \cd{dinterval} will be for left- and right-censored data, in which case \cd{c[i,]} will be a single value (and typically given as simply \cd{c[i]}), and for interval-censored data, in which case \cd{c[i,]} will be a vector of two values.  
% TODO: Next line removed by CJP as I thought it was confusing:
% or \cd{x[i] $\sim$ dinterval(c[i], t[i])} with \cd{x[i]} set to 1.
% WHY - our dinterval code treats the 2nd arg as possibly a vector - the above presumably works for scalars but I think it is clearer if we always use the first arg as the data value and the 2nd as the interval points

Nodes following a \cd{dinterval} distribution should normally be set
as \cd{data} with known values. Otherwise, the node may be simulated during initialization in some algorithms (e.g., MCMC) and thereby establish a permanent, perhaps unintended, constraint.  

Censoring differs from truncation because censoring an observation involves bounds on a random variable that could have taken any value, while in truncation we know a priori that a datum could not have occurred outside the truncation range.  


\subsubsection{Constraints and ordering}

NIMBLE provides a more general way to enforce constraints using \cd{dconstraint(cond)}.  For example, we could specify that the sum of \cd{mu1} and \cd{mu2} must be positive like this:
<<dconstraint-example, eval=FALSE>>=
mu1 ~ dnorm(0, 1) 
mu2 ~ dnorm(0, 1) 
constraint_data ~ dconstraint( mu1 + mu2 > 0 )
@ 
with \cd{constraint\_data} set (as \cd{data}) to 1.  This is
equivalent to a half-normal distribution on the half-plane $\mu_1 +
\mu_2 > 0$.  Nodes following \cd{dconstraint} should be provided as data for the same reason of avoiding unintended initialization described above for \cd{dinterval}.

%If one simulates from the model using the \cd{simulate} functions and the condition is not satisfied, then \cd{const} will be 0 and the log probability of \cd{const} (and therefore of the model as whole) will be $-\infty$.

Formally, \cd{dconstraint(cond)} is a probability distribution on $\left\{ 0, 1 \right\}$ such that $P(1) = 1$ if \cd{cond} is \cd{TRUE} and $P(0) = 1$ if \cd{cond} is \cd{FALSE}. 

% TODO: Chris thought this wording is confusing:
%Like \cd{dinterval}, \cd{dconstraint} results in distributions that are not normalized (e.g. for (\cd{mu1}, \cd{mu2})), which makes most sense if the constraint is observed rather than established a priori. 

Of course, in many cases, parameterizing the model so that the
constraints are automatically respected may be a better strategy than
using \cd{dconstraint}.  One should be cautious about constraints that
would make it hard for an MCMC or optimization to move through the
parameter space (such as equality constraints that involve two or more
parameters). For such restrictive constraints, general purpose
algorithms that are not tailored to the constraints may fail or be inefficient. If constraints are used, it will generally be wise to ensure the model is initialized with values that satisfy them.


\paragraph{Ordering}

To specify an ordering of parameters, such as $\alpha_1 <= \alpha_2 <= \alpha_3$ one can use \cd{dconstraint} as follows: 
<<ordering-example, eval=FALSE>>=
constraint_data ~ dconstraint( alpha1 <= alpha2 & alpha2 <= alpha3 )
@ 

Note that unlike in BUGS, one cannot specify prior ordering using syntax such as
\begin{verbatim}
alpha[1] ~ dnorm(0, 1) I(, alpha[2])
alpha[2] ~ dnorm(0, 1) I(alpha[1], alpha[3])
alpha[3] ~ dnorm(0, 1) I(alpha[2], )
\end{verbatim}
as this does not represent a directed acyclic graph. 
% TODO: CHRIS, WOULDN'T THIS WORK WITH \cd{alpha[1] $\sim$ dnorm(0, 1)}?  DOES BUGS REALLY ALLOW THIS NON-DAG?
% PERRY, JAGS manual indicates the above is allowed in BUGS. Are you asking if it would work in NIMBLE with alpha1~dnorm(0,1) -- no because alpha2 still depends on alpha3 and vice versa

Also note that specifying prior ordering using \cd{T(,)} can result in possibly unexpected results.  For example:
\begin{verbatim}
alpha1 ~ dnorm(0, 1)
alpha2 ~ dnorm(0, 1) T(alpha1, )
alpha3 ~ dnorm(0, 1) T(alpha2, )
\end{verbatim}
will enforce \cd{alpha1 $\le$ alpha2 $\le$ alpha3}, but it does not treat the three parameters symmetrically.  Instead it puts a marginal prior on \cd{alpha1} that is standard normal and then constrains \cd{alpha2} and \cd{alpha3} to follow truncated normal distributions. This is not equivalent to a symmetric prior on the three \cd{alpha}s that assigns zero probability density when values are not in order.

NIMBLE does not support the JAGS \cd{sort} syntax.


